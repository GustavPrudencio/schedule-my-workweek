{"version":3,"sources":["utilities/inputUtilities.js","utilities/dateTimeFormatter.js","components/MultiDayPicker.js","components/ColorPicker.js","data/daysOfWeek.js","components/AddToTemplateModal.js","data/googleColors.js","components/Planner.js","serviceWorker.js","index.js"],"names":["handleInputChanges","event","name","target","val","value","this","setState","Object","defineProperty","formatToTimeString","time","moment","format","MultiDayPicker","state","Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","selectedDays","dayToggle","e","_this","checked","getSelectedDays","_this$state","push","setDay","day","index","parseInt","selectedDay","props","listOfDays","renderDayButton","react_default","a","createElement","Fragment","key","id","type","onChange","bind","assertThisInitialized","className","htmlFor","letter","prevProps","prevState","daysOfWeek","sendSelectedDays","dayOfWeek","_this2","reactstrap_es","style","paddingTop","paddingBottom","map","valid","position","top","Component","ColorPicker","_ref","colorList","selectedColor","defaultColor","setSelectedColor","marginTop","caret","backgroundColor","modifiers","setMaxHeight","enabled","order","fn","data","objectSpread","styles","overflow","maxHeight","color","height","marginBottom","onClick","populateColors","short","AddToTemplateModal","inEditMode","colorTypeId","headerTextColor","defaultBgColor","modalHeaderColor","title","addEventTitle","startDate","startTime","endTime","validation","pickedADay","pleasePickADay","populateDaysBox","setSelectedDays","length","validateInputs","getFormData","handleSubmission","sendUpdatedEvent","selectedEvent","newEvents","sendEventToCalendar","original","resetValues","showUpdatedEvent","closeHandler","onClose","updateInputValue","updateModalBgColor","handleDayChange","add","insertDeleteButton","delete","colorIndex","renderDayPicker","components_MultiDayPicker","Number","isInteger","allValid","start","end","_this$props$selectedE","modalOpen","maxWidth","minWidth","isOpen","toggle","modalTransition","timeout","backdropTransition","width","float","invalid","components_ColorPicker","googleColors","es","selected","showTimeSelect","showTimeSelectOnly","timeIntervals","minTime","maxTime","dateFormat","concat","DragAndDropCalendar","withDragAndDrop","BigCalendar","localizer","momentLocalizer","colorTypes","colorKeys","keys","filter","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_loop","colorData","forEach","_iterator","Symbol","iterator","next","done","err","return","App","events","quickCreateModal","newStartTime","newEndTime","updateCalendarFromQuickCreate","newEventsArr","ev","reformatEventData","toConsumableArray","bgColor","Date","closeModalHandler","quickRemoveFromCalendar","moveEventHandler","onMoveEvent","prepareMovedEventForUpdate","newStart","newEnd","updatedEvent","renderMovedEvent","setEventCellStyling","background","substring","onCalendarEventSelection","calendarSelectionHandler","slotInfo","newEventStart","newEventEnd","savedData","localStorage","getItem","JSON","parse","stringify","setItem","endDateTime","hours","minutes","toDate","reformatted","remaining","_this3","bottom","borderRadius","margin","assign","selectable","defaultDate","defaultView","views","step","timeslots","toolbar","min","formats","dayFormat","date","culture","timeGutterFormat","onEventDrop","eventPropGetter","onSelectEvent","onSelectSlot","components_AddToTemplateModal","renderUpdatedEvent","Boolean","window","location","hostname","match","ReactDOM","render","Planner","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.03f02fc9.chunk.js","sourcesContent":["const handleInputChanges = function(event) {\r\n  let name = event.target.name;\r\n  let val = event.target.value;\r\n  this.setState({ [name]: val });\r\n};\r\n\r\nexport { handleInputChanges };\r\n","import moment from \"moment\";\r\nconst formatToDateString = date => moment(date).format(\"YYYY-MM-DD\");\r\nconst formatToTimeString = time => moment(time).format(\"HH:mm\");\r\n\r\nexport { formatToDateString, formatToTimeString };\r\n","import React, { Component } from \"react\";\r\nimport { Label, FormGroup } from \"reactstrap\";\r\n\r\nclass MultiDayPicker extends Component {\r\n  state = {\r\n    Sunday: false,\r\n    Monday: false,\r\n    Tuesday: false,\r\n    Wednesday: false,\r\n    Thursday: false,\r\n    Friday: false,\r\n    Saturday: false,\r\n    selectedDays: []\r\n  };\r\n\r\n  dayToggle = e => this.setState({ [e.target.name]: e.target.checked });\r\n\r\n  getSelectedDays = () => {\r\n    let selectedDays = [];\r\n    const {\r\n      Sunday,\r\n      Monday,\r\n      Tuesday,\r\n      Wednesday,\r\n      Thursday,\r\n      Friday,\r\n      Saturday\r\n    } = this.state;\r\n\r\n    if (Sunday) selectedDays.push(0);\r\n    if (Monday) selectedDays.push(1);\r\n    if (Tuesday) selectedDays.push(2);\r\n    if (Wednesday) selectedDays.push(3);\r\n    if (Thursday) selectedDays.push(4);\r\n    if (Friday) selectedDays.push(5);\r\n    if (Saturday) selectedDays.push(6);\r\n\r\n    return selectedDays;\r\n  };\r\n\r\n  setDay = day => {\r\n    if (day) {\r\n      const index = parseInt(day, 10);\r\n      const selectedDay = this.props.listOfDays[index].name;\r\n      this.setState({ [selectedDay]: true });\r\n    }\r\n  };\r\n\r\n  renderDayButton = day => {\r\n    return (\r\n      <React.Fragment key={day.id}>\r\n        <input\r\n          type=\"checkbox\"\r\n          id={day.name}\r\n          name={day.name}\r\n          checked={this.state[day.name]}\r\n          onChange={this.dayToggle.bind(this)}\r\n          className=\"weekday\"\r\n        />\r\n        <label htmlFor={day.name}>{day.letter}</label>\r\n      </React.Fragment>\r\n    );\r\n  };\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (this.state !== prevState) {\r\n      let daysOfWeek = this.getSelectedDays();\r\n      this.props.sendSelectedDays(daysOfWeek);\r\n    }\r\n    if (this.props.dayOfWeek !== prevProps.dayOfWeek) {\r\n      this.setDay(this.props.dayOfWeek);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"weekDays-selector\">\r\n        <Label style={{ paddingTop: \"0.2em\", paddingBottom: \"0.2em\" }}>\r\n          Select multiple days for a repeating event\r\n        </Label>\r\n\r\n        <FormGroup className=\"d-flex justify-content-center\">\r\n          {(this.props.listOfDays || []).map(day => this.renderDayButton(day))}\r\n        </FormGroup>\r\n        {this.props.valid && (\r\n          <small\r\n            className=\"text-danger\"\r\n            style={{ position: \"relative\", top: \"-1em\" }}\r\n          >\r\n            At least one day is required\r\n          </small>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MultiDayPicker;\r\n","import React from \"react\";\r\nimport {\r\n  UncontrolledDropdown,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  DropdownItem\r\n} from \"reactstrap\";\r\n\r\nconst ColorPicker = ({\r\n  colorList,\r\n  selectedColor,\r\n  defaultColor,\r\n  setSelectedColor\r\n}) => {\r\n  const populateColors = color => {\r\n    return (\r\n      <DropdownItem\r\n        key={color.id}\r\n        style={{\r\n          backgroundColor: color.color,\r\n          height: \"2em\",\r\n          marginBottom: \"0.15em\"\r\n        }}\r\n        onClick={() => setSelectedColor(color.id)}\r\n        className=\"colorBox-cursor\"\r\n      />\r\n    );\r\n  };\r\n\r\n  return (\r\n    <UncontrolledDropdown style={{ marginTop: \"1.5em\" }}>\r\n      <DropdownToggle\r\n        caret\r\n        style={{ backgroundColor: selectedColor || defaultColor }}\r\n      >\r\n        Event Color\r\n      </DropdownToggle>\r\n      <DropdownMenu\r\n        modifiers={{\r\n          setMaxHeight: {\r\n            enabled: true,\r\n            order: 890,\r\n            fn: data => {\r\n              return {\r\n                ...data,\r\n                styles: {\r\n                  ...data.styles,\r\n                  overflow: \"auto\",\r\n                  maxHeight: 160\r\n                }\r\n              };\r\n            }\r\n          }\r\n        }}\r\n      >\r\n        {(colorList || []).map(color => populateColors(color))}\r\n      </DropdownMenu>\r\n    </UncontrolledDropdown>\r\n  );\r\n};\r\n\r\nexport default ColorPicker;\r\n","export default [\r\n  { id: 0, name: \"Sunday\", short: \"Sun\", letter: \"S\" },\r\n  { id: 1, name: \"Monday\", short: \"Mon\", letter: \"M\" },\r\n  { id: 2, name: \"Tuesday\", short: \"Tue\", letter: \"T\" },\r\n  { id: 3, name: \"Wednesday\", short: \"Wed\", letter: \"W\" },\r\n  { id: 4, name: \"Thursday\", short: \"Thu\", letter: \"TH\" },\r\n  { id: 5, name: \"Friday\", short: \"Fri\", letter: \"F\" },\r\n  { id: 6, name: \"Saturday\", short: \"Sat\", letter: \"S\" }\r\n];\r\n","import React, { Component } from \"react\";\r\nimport moment from \"moment\";\r\nimport {\r\n  Input,\r\n  Label,\r\n  FormGroup,\r\n  ListGroup,\r\n  ListGroupItem,\r\n  Modal,\r\n  ModalBody,\r\n  ModalHeader,\r\n  FormFeedback\r\n} from \"reactstrap\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport { handleInputChanges } from \"../utilities/inputUtilities\";\r\nimport { formatToTimeString } from \"../utilities/dateTimeFormatter\";\r\nimport MultiDayPicker from \"./MultiDayPicker\";\r\nimport ColorPicker from \"./ColorPicker\";\r\nimport daysOfWeek from \"../data/daysOfWeek\";\r\nimport \"../styles/react-datepicker.css\";\r\nimport \"../styles/zmdi-buttons.css\";\r\n\r\nclass AddToTemplateModal extends Component {\r\n  state = {\r\n    selectedDays: [],\r\n    inEditMode: false,\r\n    colorTypeId: \"9\",\r\n    dayOfWeek: \"\",\r\n    headerTextColor: \"white\",\r\n    defaultBgColor: \"#5484ed\",\r\n    modalHeaderColor: \"\",\r\n    title: \"\",\r\n    addEventTitle: \"Add to Your Schedule\",\r\n    startDate: moment(\"11012015\", \"MMDDYYYY\"),\r\n    startTime: moment(\"11012015 08:00\", \"MMDDYYYY HH:mm\"),\r\n    endTime: moment(\"11012015 10:00\", \"MMDDYYYY HH:mm\"),\r\n    validation: {\r\n      color: true,\r\n      pickedADay: false,\r\n      pleasePickADay: false,\r\n      title: true\r\n    }\r\n  };\r\n\r\n  populateDaysBox = dayOfWeek => {\r\n    return (\r\n      <option key={dayOfWeek.id} value={dayOfWeek.id}>\r\n        {dayOfWeek.name}\r\n      </option>\r\n    );\r\n  };\r\n\r\n  setSelectedDays = selectedDays => {\r\n    this.setState({ selectedDays }, () => {\r\n      if (selectedDays.length !== 0 && this.state.validation.pleasePickADay)\r\n        this.validateInputs();\r\n    });\r\n  };\r\n\r\n  getFormData = () => {\r\n    let startTime = formatToTimeString(this.state.startTime);\r\n    let endTime = formatToTimeString(this.state.endTime);\r\n    let colorTypeId = parseInt(this.state.colorTypeId);\r\n    const newEventData = {\r\n      colorTypeId,\r\n      startTime,\r\n      endTime,\r\n      dayOfWeek: parseInt(this.state.dayOfWeek),\r\n      title: this.state.title\r\n    };\r\n    return newEventData;\r\n  };\r\n\r\n  handleSubmission = event => {\r\n    if (this.state.inEditMode) {\r\n      this.sendUpdatedEvent(this.props.selectedEvent, event);\r\n    } else {\r\n      let newEvents = this.state.selectedDays.map(day => {\r\n        let dayOfWeek = day;\r\n        let { colorTypeId, title, startTime, endTime } = event;\r\n        return { colorTypeId, title, startTime, endTime, dayOfWeek };\r\n      });\r\n      this.sendEventToCalendar(newEvents);\r\n    }\r\n  };\r\n\r\n  sendUpdatedEvent = (original, event) => {\r\n    this.resetValues();\r\n    this.props.showUpdatedEvent(original, event);\r\n  };\r\n\r\n  sendEventToCalendar = event => {\r\n    this.resetValues();\r\n    this.props.sendEventToCalendar(event);\r\n  };\r\n\r\n  resetValues = () => {\r\n    this.setState({\r\n      //colorTypeId: \"9\",\r\n      dayOfWeek: \"\",\r\n      //modalHeaderColor: \"\",\r\n      title: \"\",\r\n      inEditMode: false,\r\n      selectedDays: [],\r\n      validation: {\r\n        color: true,\r\n        pickedADay: false,\r\n        pleasePickADay: false,\r\n        title: true\r\n      }\r\n    });\r\n  };\r\n\r\n  closeHandler = () => {\r\n    this.props.onClose();\r\n    this.resetValues();\r\n  };\r\n\r\n  updateInputValue = handleInputChanges.bind(this);\r\n\r\n  setSelectedColor = colorTypeId => {\r\n    this.setState({ colorTypeId });\r\n    this.updateModalBgColor(colorTypeId);\r\n  };\r\n\r\n  handleDayChange = e => {\r\n    this.updateInputValue(e);\r\n    this.setState({\r\n      startDate: moment(\"11012015\", \"MMDDYYYY\").add(e.target.value, \"days\")\r\n    });\r\n  };\r\n\r\n  insertDeleteButton = () => {\r\n    if (this.state.inEditMode === true) {\r\n      return (\r\n        <button\r\n          className=\"btn btn-danger\"\r\n          onClick={() => {\r\n            this.props.delete(this.props.selectedEvent);\r\n            this.closeHandler();\r\n          }}\r\n        >\r\n          Delete\r\n        </button>\r\n      );\r\n    }\r\n  };\r\n\r\n  updateModalBgColor = id => {\r\n    let modalHeaderColor = this.props.colorIndex[id].color;\r\n    this.setState({ modalHeaderColor });\r\n  };\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (\r\n      this.props.start !== prevProps.start ||\r\n      this.props.end !== prevProps.end\r\n    ) {\r\n      this.setState({\r\n        startDate: moment(this.props.start),\r\n        startTime: moment(this.props.start),\r\n        endTime: moment(this.props.end),\r\n        dayOfWeek: moment(this.props.start).format(\"e\")\r\n      });\r\n    }\r\n    if (this.state.selectedDays !== prevState.selectedDays) {\r\n      //this.validateInputs();\r\n    }\r\n    if (this.props.selectedEvent !== prevProps.selectedEvent) {\r\n      let {\r\n        colorTypeId,\r\n        dayOfWeek,\r\n        start,\r\n        end,\r\n        title\r\n      } = this.props.selectedEvent;\r\n      if (colorTypeId) {\r\n        this.updateModalBgColor(colorTypeId);\r\n        this.setState({\r\n          inEditMode: true,\r\n          title,\r\n          colorTypeId,\r\n          dayOfWeek,\r\n          startTime: moment(start),\r\n          endTime: moment(end)\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  renderDayPicker = () => {\r\n    if (this.state.inEditMode === false) {\r\n      return (\r\n        <MultiDayPicker\r\n          dayOfWeek={this.state.dayOfWeek}\r\n          sendSelectedDays={this.setSelectedDays}\r\n          valid={this.state.validation.pleasePickADay}\r\n          listOfDays={daysOfWeek}\r\n        />\r\n      );\r\n    } else {\r\n      return (\r\n        <div className=\"form-group\" style={{ paddingBottom: \"0.1em\" }}>\r\n          <label>Day of Week</label>\r\n          <select\r\n            className=\"custom-select form-control mx-auto\"\r\n            name=\"dayOfWeek\"\r\n            value={this.state.dayOfWeek}\r\n            onChange={this.handleDayChange}\r\n          >\r\n            {daysOfWeek.map(day => this.populateDaysBox(day))}\r\n          </select>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  validateInputs = () => {\r\n    const {\r\n      colorTypeId,\r\n      validation,\r\n      inEditMode,\r\n      selectedDays,\r\n      title\r\n    } = this.state;\r\n    title.length > 0 ? (validation.title = true) : (validation.title = false);\r\n    Number.isInteger(parseInt(colorTypeId))\r\n      ? (validation.color = true)\r\n      : (validation.color = false);\r\n    if (!inEditMode) {\r\n      if (selectedDays.length === 0) {\r\n        validation.pickedADay = false;\r\n        validation.pleasePickADay = true;\r\n      } else {\r\n        validation.pickedADay = true;\r\n        validation.pleasePickADay = false;\r\n      }\r\n    }\r\n    this.setState({ validation });\r\n  };\r\n\r\n  allValid = () => {\r\n    const { validation } = this.state;\r\n    if (this.state.inEditMode) {\r\n      if (validation.color) {\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n    if (\r\n      !this.state.inEditMode &&\r\n      validation.color &&\r\n      validation.pickedADay &&\r\n      validation.title\r\n    ) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { modalOpen } = this.props;\r\n    return (\r\n      <React.Fragment>\r\n        <Modal\r\n          style={{\r\n            maxWidth: 400,\r\n            minWidth: \"25em\",\r\n            position: \"relative\",\r\n            top: \"10\" // original 25\r\n          }}\r\n          isOpen={modalOpen}\r\n          toggle={() => this.closeHandler()}\r\n          modalTransition={{ timeout: 10 }}\r\n          backdropTransition={{ timeout: 10 }}\r\n          //className={this.props.className} // this will auto-size the modal if enabled\r\n        >\r\n          <ModalHeader\r\n            style={{\r\n              position: \"relative\",\r\n              paddingTop: \"2em\",\r\n              width: \"100%\",\r\n              color: this.state.headerTextColor,\r\n              backgroundColor:\r\n                this.state.modalHeaderColor || this.state.defaultBgColor\r\n            }}\r\n          >\r\n            <div\r\n              className=\"text-center mx-auto\"\r\n              style={{\r\n                position: \"relative\",\r\n                top: \"-0.4em\",\r\n                marginBottom: \"-0.1em\",\r\n                float: \"right\"\r\n              }}\r\n            >\r\n              <big className=\"text-center\">\r\n                &nbsp;\r\n                {(this.state.inEditMode && \"Edit Your Saved Event\") ||\r\n                  this.state.addEventTitle}\r\n              </big>\r\n            </div>\r\n          </ModalHeader>\r\n          <ModalBody\r\n            style={{\r\n              position: \"relative\",\r\n              top: \"-0.5em\",\r\n              marginBottom: \"-0.9em\"\r\n            }}\r\n          >\r\n            <ListGroup>\r\n              <ListGroupItem className=\"border-0\">\r\n                <div\r\n                  className=\"mx-auto\"\r\n                  style={{ marginTop: \"0.6em\", paddingBottom: \"1.4em\" }}\r\n                >\r\n                  <FormGroup>\r\n                    <Label>Event Name</Label>\r\n                    <Input\r\n                      type=\"text\"\r\n                      name=\"title\"\r\n                      value={this.state.title}\r\n                      onChange={e => {\r\n                        this.setState({ [e.target.name]: e.target.value }, () =>\r\n                          this.validateInputs()\r\n                        );\r\n                      }}\r\n                      invalid={!this.state.validation.title}\r\n                    />\r\n                    <FormFeedback valid />\r\n                    <FormFeedback>This field is required</FormFeedback>\r\n                  </FormGroup>\r\n\r\n                  <FormGroup>\r\n                    <ColorPicker\r\n                      colorList={this.props.googleColors}\r\n                      selectedColor={this.state.modalHeaderColor}\r\n                      defaultColor={this.state.defaultBgColor}\r\n                      setSelectedColor={this.setSelectedColor}\r\n                    />\r\n                  </FormGroup>\r\n\r\n                  {this.renderDayPicker()}\r\n\r\n                  <div\r\n                    className=\"form-group\"\r\n                    style={{ minWidth: \"22em\", marginBottom: \"-0.0em\" }}\r\n                  >\r\n                    <label>Start/End Times</label>\r\n                    <div className=\"form-row\">\r\n                      <div\r\n                        className=\"col\"\r\n                        style={{ maxWidth: \"25%\", minWidth: \"8em\" }}\r\n                      >\r\n                        <DatePicker\r\n                          selected={this.state.startTime}\r\n                          onChange={startTime => {\r\n                            if (startTime > this.state.endTime) {\r\n                              this.setState({\r\n                                startTime,\r\n                                endTime: moment(startTime).add(15, \"minutes\")\r\n                              });\r\n                            } else {\r\n                              this.setState({ startTime });\r\n                            }\r\n                          }}\r\n                          showTimeSelect\r\n                          showTimeSelectOnly\r\n                          timeIntervals={15}\r\n                          className=\"form-control text-center\"\r\n                          minTime={moment(\"11012015 05:00\", \"MMDDYYYY HH:mm\")}\r\n                          maxTime={moment(\"11012015 23:30\", \"MMDDYYYY HH:mm\")}\r\n                          dateFormat=\"LT\"\r\n                        />\r\n                      </div>\r\n                      <div\r\n                        className=\"col text-center\"\r\n                        style={{\r\n                          maxWidth: \"8%\",\r\n                          minWidth: \"1em\",\r\n                          marginTop: \"0.6em\"\r\n                        }}\r\n                      >\r\n                        <label>to</label>\r\n                      </div>\r\n                      <div\r\n                        className=\"col\"\r\n                        style={{ maxWidth: \"25%\", minWidth: \"8em\" }}\r\n                      >\r\n                        <DatePicker\r\n                          selected={this.state.endTime}\r\n                          onChange={endTime => this.setState({ endTime })}\r\n                          showTimeSelect\r\n                          showTimeSelectOnly\r\n                          timeIntervals={15}\r\n                          minTime={moment(\r\n                            `11012015 ${moment(this.state.startTime)\r\n                              .add(15, \"minutes\")\r\n                              .format(\"HH:mm\")}`,\r\n                            \"MMDDYYYY HH:mm\"\r\n                          )}\r\n                          maxTime={moment(\"11012015 23:59\", \"MMDDYYYY HH:mm\")}\r\n                          className=\"form-control text-center\"\r\n                          dateFormat=\"LT\"\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"text-right\">\r\n                  {this.insertDeleteButton()}\r\n                  &nbsp;&nbsp;\r\n                  <button\r\n                    className=\"btn btn-primary\"\r\n                    onClick={() => {\r\n                      this.validateInputs();\r\n                      if (this.allValid()) {\r\n                        const data = this.getFormData();\r\n                        this.handleSubmission(data);\r\n                      }\r\n                    }}\r\n                  >\r\n                    {(this.state.inEditMode && \"Update\") || \"Add\"}\r\n                  </button>\r\n                </div>\r\n              </ListGroupItem>\r\n            </ListGroup>\r\n          </ModalBody>\r\n        </Modal>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddToTemplateModal;\r\n","export default [\r\n  {\r\n    color: \"#5484ed\",\r\n    id: 9\r\n  },\r\n  {\r\n    color: \"#a4bdfc\",\r\n    id: 1\r\n  },\r\n  {\r\n    color: \"#7ae7bf\",\r\n    id: 2\r\n  },\r\n  {\r\n    color: \"#dbadff\",\r\n    id: 3\r\n  },\r\n  {\r\n    color: \"#ff887c\",\r\n    id: 4\r\n  },\r\n  {\r\n    color: \"#fbd75b\",\r\n    id: 5\r\n  },\r\n  {\r\n    color: \"#ffb878\",\r\n    id: 6\r\n  },\r\n  {\r\n    color: \"#46d6db\",\r\n    id: 7\r\n  },\r\n  {\r\n    color: \"#e1e1e1\",\r\n    id: 8\r\n  },\r\n  {\r\n    color: \"#51b749\",\r\n    id: 10\r\n  },\r\n  {\r\n    color: \"#dc2127\",\r\n    id: 11\r\n  }\r\n];\r\n","import React, { Component } from \"react\";\r\nimport BigCalendar from \"react-big-calendar\";\r\nimport moment from \"moment\";\r\nimport withDragAndDrop from \"react-big-calendar/lib/addons/dragAndDrop\";\r\nimport QuickCreateModal from \"./AddToTemplateModal\";\r\nimport googleColors from \"../data/googleColors\";\r\nimport \"../styles/custom-calendar.css\";\r\nimport \"react-big-calendar/lib/addons/dragAndDrop/styles.css\";\r\n\r\nconst DragAndDropCalendar = withDragAndDrop(BigCalendar);\r\nconst localizer = BigCalendar.momentLocalizer(moment);\r\n\r\nconst colorIndex = colorTypes => {\r\n  // transform array of colors into one object (to be used as an index for O(1) lookup)\r\n  const colorIndex = {};\r\n  const colorKeys = Object.keys(colorTypes[0]).filter(key => key !== \"id\");\r\n  for (const color of colorTypes) {\r\n    const colorData = {};\r\n    colorKeys.forEach(key => {\r\n      colorData[key] = color[key];\r\n    });\r\n    colorIndex[color.id] = colorData;\r\n  }\r\n  return colorIndex;\r\n};\r\n\r\nclass App extends Component {\r\n  state = {\r\n    events: [],\r\n    colorIndex: colorIndex(googleColors),\r\n    quickCreateModal: false,\r\n    selectedEvent: {},\r\n    newStartTime: null,\r\n    newEndTime: null\r\n  };\r\n\r\n  updateCalendarFromQuickCreate = newEvents => {\r\n    let newEventsArr = newEvents.map(ev => this.reformatEventData(ev));\r\n    this.setState({\r\n      events: [...this.state.events, ...newEventsArr],\r\n      quickCreateModal: false\r\n    });\r\n  };\r\n\r\n  reformatEventData = event => {\r\n    let startDate = moment(\"11012015\", \"MMDDYYYY\")\r\n      .add(event.dayOfWeek, \"days\")\r\n      .format(\"YYYY-MM-DD\");\r\n    if (this.state.colorIndex[event.colorTypeId]) {\r\n      const colorData = this.state.colorIndex[event.colorTypeId];\r\n      let bgColor = colorData.color;\r\n      const updatedEvent = {\r\n        ...event,\r\n        start: new Date(`${startDate} ${event.startTime}`),\r\n        end: new Date(`${startDate} ${event.endTime}`),\r\n        bgColor\r\n      };\r\n      return updatedEvent;\r\n    } else {\r\n      // just in edge case\r\n      const updatedEvent = {\r\n        ...event,\r\n        start: new Date(`${startDate} ${event.startTime}`),\r\n        end: new Date(`${startDate} ${event.endTime}`),\r\n        bgColor: \"#4286f4\"\r\n      };\r\n      return updatedEvent;\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    let savedData = localStorage.getItem(\"schedule\");\r\n    if (savedData) {\r\n      const parsed = JSON.parse(savedData);\r\n      const events = parsed.map(ev => this.reformatEventData(ev));\r\n      this.setState({ events });\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (this.state.events !== prevState.events) {\r\n      const events = JSON.stringify(this.state.events);\r\n      localStorage.setItem(\"schedule\", events);\r\n    }\r\n  }\r\n\r\n  closeModalHandler = () => {\r\n    this.setState({\r\n      quickCreateModal: false,\r\n      selectedEvent: {}\r\n    });\r\n  };\r\n\r\n  quickRemoveFromCalendar = event => {\r\n    let events = this.state.events.filter(ev => ev !== event);\r\n    this.setState({ events });\r\n  };\r\n\r\n  moveEventHandler = this.onMoveEvent.bind(this);\r\n\r\n  onMoveEvent({ event, start, end }) {\r\n    let startDate = moment(start).format(\"DD\");\r\n    let endDate = moment(end).format(\"DD\");\r\n    let endDateTime = end;\r\n    if (startDate !== endDate) {\r\n      endDateTime = moment(start)\r\n        .hours(23)\r\n        .minutes(59)\r\n        .toDate();\r\n    }\r\n    this.prepareMovedEventForUpdate(event, start, endDateTime);\r\n  }\r\n\r\n  prepareMovedEventForUpdate = (event, newStart, newEnd) => {\r\n    let dayOfWeek = moment(newStart).format(\"e\");\r\n    let startTime = moment(newStart).format(\"HH:mm\");\r\n    let endTime = moment(newEnd).format(\"HH:mm\");\r\n    const updatedEvent = {\r\n      ...event,\r\n      dayOfWeek,\r\n      startTime,\r\n      endTime\r\n    };\r\n    this.renderMovedEvent(event, updatedEvent, newStart, newEnd);\r\n  };\r\n\r\n  renderUpdatedEvent(original, event) {\r\n    const { events } = this.state;\r\n    let reformatted = this.reformatEventData(event);\r\n    let remaining = events.filter(ev => ev !== original);\r\n    this.setState({\r\n      events: [...remaining, reformatted],\r\n      quickCreateModal: false,\r\n      selectedEvent: {}\r\n    });\r\n  }\r\n\r\n  renderMovedEvent(original, event, start, end) {\r\n    const { events } = this.state;\r\n    const updatedEvent = { ...event, start, end };\r\n    const remaining = events.filter(ev => ev !== original);\r\n    this.setState({\r\n      events: [...remaining, updatedEvent]\r\n    });\r\n  }\r\n\r\n  setEventCellStyling = event => {\r\n    let color = event.bgColor;\r\n    let style = {\r\n      background: `rgba(${parseInt(color.substring(1, 3), 16)}, ${parseInt(\r\n        color.substring(3, 5),\r\n        16\r\n      )}, ${parseInt(color.substring(5, 7), 16)}, 0.99)`\r\n    };\r\n    return { style };\r\n  };\r\n\r\n  onCalendarEventSelection = event => {\r\n    this.setState({\r\n      selectedEvent: event,\r\n      quickCreateModal: true\r\n    });\r\n  };\r\n\r\n  calendarSelectionHandler = slotInfo => {\r\n    let newEventStart = parseInt(moment(slotInfo.start).format(\"x\"));\r\n    let newEventEnd = parseInt(moment(slotInfo.end).format(\"x\"));\r\n\r\n    this.setState({\r\n      newEventStart,\r\n      newEventEnd,\r\n      quickCreateModal: true\r\n    });\r\n    //console.log(slotInfo);\r\n  };\r\n\r\n  render() {\r\n    let calDateTimeFormatting = {\r\n      dayFormat: (date, culture, localizer) =>\r\n        localizer.format(date, \"dddd\", culture),\r\n      timeGutterFormat: (date, culture, localizer) =>\r\n        localizer.format(date, \"h a\", culture)\r\n    };\r\n    return (\r\n      <div className=\"container-fluid\">\r\n        <div className=\"form-row\">\r\n          <div className=\"col\" />\r\n          <div className=\"col text-center\">\r\n            <h2\r\n              className=\"text-center\"\r\n              style={{ position: \"relative\", bottom: \"-0.3em\" }}\r\n            >\r\n              Week Planner\r\n            </h2>\r\n          </div>\r\n          <div className=\"col text-right\">\r\n            <button\r\n              className=\"btn btn-lg btn-dark\"\r\n              onClick={() => this.setState({ quickCreateModal: true })}\r\n              style={{\r\n                position: \"relative\",\r\n                top: \"0.3em\",\r\n                borderRadius: \"1.8em\",\r\n                margin: \"0 1em 0.8em 0\"\r\n              }}\r\n            >\r\n              <i className=\"zmdi zmdi-plus text-white zmdi-hc-lg\" />\r\n            </button>\r\n          </div>\r\n        </div>\r\n        <DragAndDropCalendar\r\n          {...this.props}\r\n          localizer={localizer}\r\n          selectable=\"ignoreEvents\"\r\n          events={this.state.events}\r\n          defaultDate={new Date(2015, 10, 1, 0)}\r\n          defaultView={\"week\"}\r\n          views={[\"week\"]}\r\n          step={15}\r\n          timeslots={4}\r\n          toolbar={false}\r\n          min={moment()\r\n            .hours(5)\r\n            .minutes(0)\r\n            .toDate()}\r\n          formats={calDateTimeFormatting}\r\n          onEventDrop={this.moveEventHandler}\r\n          eventPropGetter={this.setEventCellStyling}\r\n          onSelectEvent={this.onCalendarEventSelection}\r\n          onSelectSlot={this.calendarSelectionHandler}\r\n        />\r\n\r\n        <QuickCreateModal\r\n          start={this.state.newEventStart}\r\n          selectedEvent={this.state.selectedEvent}\r\n          colorIndex={this.state.colorIndex}\r\n          end={this.state.newEventEnd}\r\n          modalOpen={this.state.quickCreateModal}\r\n          onClose={this.closeModalHandler.bind(this)}\r\n          googleColors={googleColors}\r\n          sendEventToCalendar={this.updateCalendarFromQuickCreate}\r\n          showUpdatedEvent={this.renderUpdatedEvent.bind(this)}\r\n          delete={this.quickRemoveFromCalendar}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n\r\n              // Execute callback\r\n              if (config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Planner from \"./components/Planner\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\n\r\nReactDOM.render(<Planner />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}