{"version":3,"sources":["utilities/inputUtilities.js","utilities/dateTimeFormatter.js","components/MultiDayPicker.js","components/ColorPicker.js","data/daysOfWeek.js","components/AddToTemplateModal.js","components/GenericModal.js","data/googleColors.js","components/Planner.js","serviceWorker.js","index.js"],"names":["handleInputChanges","event","name","target","val","value","this","setState","Object","defineProperty","formatToTimeString","time","moment","format","MultiDayPicker","state","Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","selectedDays","dayToggle","e","_this","checked","getSelectedDays","props","listOfDays","forEach","day","push","id","setDay","index","parseInt","selectedDay","renderDayButton","react_default","a","createElement","Fragment","key","type","onChange","bind","assertThisInitialized","className","htmlFor","letter","prevProps","prevState","daysOfWeek","sendSelectedDays","dayOfWeek","_this2","reactstrap_es","style","paddingTop","paddingBottom","map","valid","position","top","Component","ColorPicker","_ref","colorList","selectedColor","defaultColor","setSelectedColor","marginTop","caret","backgroundColor","modifiers","setMaxHeight","enabled","order","fn","data","objectSpread","styles","overflow","maxHeight","color","height","marginBottom","onClick","populateColors","short","AddToTemplateModal","inEditMode","colorTypeId","headerTextColor","defaultBgColor","modalHeaderColor","title","addEventTitle","startDate","startTime","endTime","validation","pickedADay","pleasePickADay","populateDaysBox","setSelectedDays","length","validateInputs","getFormData","handleSubmission","sendUpdatedEvent","selectedEvent","newEvents","sendEventToCalendar","original","resetValues","showUpdatedEvent","closeHandler","onClose","updateInputValue","updateModalBgColor","handleDayChange","add","insertDeleteButton","delete","colorIndex","renderDayPicker","components_MultiDayPicker","_this$state","Number","isInteger","allValid","start","end","_this$props$selectedE","modalOpen","maxWidth","minWidth","isOpen","toggle","modalTransition","timeout","backdropTransition","width","float","invalid","components_ColorPicker","googleColors","es","selected","showTimeSelect","showTimeSelectOnly","timeIntervals","minTime","maxTime","dateFormat","concat","GenericModal","_this$props","size","children","React","DragAndDropCalendar","withDragAndDrop","BigCalendar","localizer","momentLocalizer","colorTypes","colorKeys","keys","filter","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_loop","colorData","_iterator","Symbol","iterator","next","done","err","return","App","events","quickCreateModal","newStartTime","newEndTime","showModal","updateCalendarFromQuickCreate","newEventsArr","ev","reformatEventData","toConsumableArray","bgColor","Date","closeModalHandler","quickRemoveFromCalendar","moveEventHandler","onMoveEvent","prepareMovedEventForUpdate","newStart","newEnd","updatedEvent","renderMovedEvent","setEventCellStyling","background","substring","onCalendarEventSelection","calendarSelectionHandler","slotInfo","newEventStart","newEventEnd","closeModal","localStorage","getItem","setItem","savedData","JSON","parse","stringify","endDateTime","hours","minutes","toDate","reformatted","remaining","_this3","bottom","borderRadius","margin","assign","selectable","defaultDate","defaultView","views","step","timeslots","toolbar","min","formats","dayFormat","date","culture","timeGutterFormat","onEventDrop","eventPropGetter","onSelectEvent","onSelectSlot","components_AddToTemplateModal","renderUpdatedEvent","components_GenericModal","Boolean","window","location","hostname","match","ReactDOM","render","Planner","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.12535aa5.chunk.js","sourcesContent":["const handleInputChanges = function(event) {\r\n  let name = event.target.name;\r\n  let val = event.target.value;\r\n  this.setState({ [name]: val });\r\n};\r\n\r\nexport { handleInputChanges };\r\n","import moment from \"moment\";\r\nconst formatToDateString = date => moment(date).format(\"YYYY-MM-DD\");\r\nconst formatToTimeString = time => moment(time).format(\"HH:mm\");\r\n\r\nexport { formatToDateString, formatToTimeString };\r\n","import React, { Component } from \"react\";\r\nimport { Label, FormGroup } from \"reactstrap\";\r\n\r\nclass MultiDayPicker extends Component {\r\n  state = {\r\n    Sunday: false,\r\n    Monday: false,\r\n    Tuesday: false,\r\n    Wednesday: false,\r\n    Thursday: false,\r\n    Friday: false,\r\n    Saturday: false,\r\n    selectedDays: []\r\n  };\r\n\r\n  dayToggle = e => this.setState({ [e.target.name]: e.target.checked });\r\n\r\n  getSelectedDays = () => {\r\n    let selectedDays = [];\r\n    this.props.listOfDays.forEach(day => {\r\n      if (this.state[day.name]) {\r\n        selectedDays.push(day.id);\r\n      }\r\n    });\r\n    return selectedDays;\r\n  };\r\n\r\n  setDay = day => {\r\n    if (day) {\r\n      const index = parseInt(day, 10);\r\n      const selectedDay = this.props.listOfDays[index].name;\r\n      this.setState({ [selectedDay]: true });\r\n    }\r\n  };\r\n\r\n  renderDayButton = day => {\r\n    return (\r\n      <React.Fragment key={day.id}>\r\n        <input\r\n          type=\"checkbox\"\r\n          id={day.name}\r\n          name={day.name}\r\n          checked={this.state[day.name]}\r\n          onChange={this.dayToggle.bind(this)}\r\n          className=\"weekday\"\r\n        />\r\n        <label htmlFor={day.name}>{day.letter}</label>\r\n      </React.Fragment>\r\n    );\r\n  };\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (this.state !== prevState) {\r\n      let daysOfWeek = this.getSelectedDays();\r\n      this.props.sendSelectedDays(daysOfWeek);\r\n    }\r\n    if (this.props.dayOfWeek !== prevProps.dayOfWeek) {\r\n      this.setDay(this.props.dayOfWeek);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"weekDays-selector\">\r\n        <Label style={{ paddingTop: \"0.2em\", paddingBottom: \"0.2em\" }}>\r\n          Select multiple days for a repeating event\r\n        </Label>\r\n\r\n        <FormGroup className=\"d-flex justify-content-center\">\r\n          {(this.props.listOfDays || []).map(day => this.renderDayButton(day))}\r\n        </FormGroup>\r\n        {this.props.valid && (\r\n          <small\r\n            className=\"text-danger\"\r\n            style={{ position: \"relative\", top: \"-1em\" }}\r\n          >\r\n            At least one day is required\r\n          </small>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MultiDayPicker;\r\n","import React from \"react\";\r\nimport {\r\n  UncontrolledDropdown,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  DropdownItem\r\n} from \"reactstrap\";\r\n\r\nconst ColorPicker = ({\r\n  colorList,\r\n  selectedColor,\r\n  defaultColor,\r\n  setSelectedColor\r\n}) => {\r\n  const populateColors = color => {\r\n    return (\r\n      <DropdownItem\r\n        key={color.id}\r\n        style={{\r\n          backgroundColor: color.color,\r\n          height: \"2em\",\r\n          marginBottom: \"0.15em\"\r\n        }}\r\n        onClick={() => setSelectedColor(color.id)}\r\n        className=\"colorBox-cursor\"\r\n      />\r\n    );\r\n  };\r\n\r\n  return (\r\n    <UncontrolledDropdown style={{ marginTop: \"1.5em\" }}>\r\n      <DropdownToggle\r\n        caret\r\n        style={{ backgroundColor: selectedColor || defaultColor }}\r\n      >\r\n        Event Color\r\n      </DropdownToggle>\r\n      <DropdownMenu\r\n        modifiers={{\r\n          setMaxHeight: {\r\n            enabled: true,\r\n            order: 890,\r\n            fn: data => {\r\n              return {\r\n                ...data,\r\n                styles: {\r\n                  ...data.styles,\r\n                  overflow: \"auto\",\r\n                  maxHeight: 160\r\n                }\r\n              };\r\n            }\r\n          }\r\n        }}\r\n      >\r\n        {(colorList || []).map(color => populateColors(color))}\r\n      </DropdownMenu>\r\n    </UncontrolledDropdown>\r\n  );\r\n};\r\n\r\nexport default ColorPicker;\r\n","export default [\r\n  { id: 0, name: \"Sunday\", short: \"Sun\", letter: \"S\" },\r\n  { id: 1, name: \"Monday\", short: \"Mon\", letter: \"M\" },\r\n  { id: 2, name: \"Tuesday\", short: \"Tue\", letter: \"T\" },\r\n  { id: 3, name: \"Wednesday\", short: \"Wed\", letter: \"W\" },\r\n  { id: 4, name: \"Thursday\", short: \"Thu\", letter: \"TH\" },\r\n  { id: 5, name: \"Friday\", short: \"Fri\", letter: \"F\" },\r\n  { id: 6, name: \"Saturday\", short: \"Sat\", letter: \"S\" }\r\n];\r\n","import React, { Component } from \"react\";\r\nimport moment from \"moment\";\r\nimport {\r\n  Input,\r\n  Label,\r\n  FormGroup,\r\n  ListGroup,\r\n  ListGroupItem,\r\n  Modal,\r\n  ModalBody,\r\n  ModalHeader,\r\n  FormFeedback\r\n} from \"reactstrap\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport { handleInputChanges } from \"../utilities/inputUtilities\";\r\nimport { formatToTimeString } from \"../utilities/dateTimeFormatter\";\r\nimport MultiDayPicker from \"./MultiDayPicker\";\r\nimport ColorPicker from \"./ColorPicker\";\r\nimport daysOfWeek from \"../data/daysOfWeek\";\r\nimport \"../styles/react-datepicker.css\";\r\nimport \"../styles/zmdi-buttons.css\";\r\n\r\nclass AddToTemplateModal extends Component {\r\n  state = {\r\n    selectedDays: [],\r\n    inEditMode: false,\r\n    colorTypeId: \"9\",\r\n    dayOfWeek: \"\",\r\n    headerTextColor: \"white\",\r\n    defaultBgColor: \"#5484ed\",\r\n    modalHeaderColor: \"\",\r\n    title: \"\",\r\n    addEventTitle: \"Add to Your Schedule\",\r\n    startDate: moment(\"11012015\", \"MMDDYYYY\"),\r\n    startTime: moment(\"11012015 08:00\", \"MMDDYYYY HH:mm\"),\r\n    endTime: moment(\"11012015 10:00\", \"MMDDYYYY HH:mm\"),\r\n    validation: {\r\n      color: true,\r\n      pickedADay: false,\r\n      pleasePickADay: false,\r\n      title: true\r\n    }\r\n  };\r\n\r\n  populateDaysBox = dayOfWeek => {\r\n    return (\r\n      <option key={dayOfWeek.id} value={dayOfWeek.id}>\r\n        {dayOfWeek.name}\r\n      </option>\r\n    );\r\n  };\r\n\r\n  setSelectedDays = selectedDays => {\r\n    this.setState({ selectedDays }, () => {\r\n      if (selectedDays.length !== 0 && this.state.validation.pleasePickADay)\r\n        this.validateInputs();\r\n    });\r\n  };\r\n\r\n  getFormData = () => {\r\n    let startTime = formatToTimeString(this.state.startTime);\r\n    let endTime = formatToTimeString(this.state.endTime);\r\n    let colorTypeId = parseInt(this.state.colorTypeId);\r\n    const newEventData = {\r\n      colorTypeId,\r\n      startTime,\r\n      endTime,\r\n      dayOfWeek: parseInt(this.state.dayOfWeek),\r\n      title: this.state.title\r\n    };\r\n    return newEventData;\r\n  };\r\n\r\n  handleSubmission = event => {\r\n    if (this.state.inEditMode) {\r\n      this.sendUpdatedEvent(this.props.selectedEvent, event);\r\n    } else {\r\n      let newEvents = this.state.selectedDays.map(day => {\r\n        let dayOfWeek = day;\r\n        let { colorTypeId, title, startTime, endTime } = event;\r\n        return { colorTypeId, title, startTime, endTime, dayOfWeek };\r\n      });\r\n      this.sendEventToCalendar(newEvents);\r\n    }\r\n  };\r\n\r\n  sendUpdatedEvent = (original, event) => {\r\n    this.resetValues();\r\n    this.props.showUpdatedEvent(original, event);\r\n  };\r\n\r\n  sendEventToCalendar = event => {\r\n    this.resetValues();\r\n    this.props.sendEventToCalendar(event);\r\n  };\r\n\r\n  resetValues = () => {\r\n    this.setState({\r\n      //colorTypeId: \"9\",\r\n      dayOfWeek: \"\",\r\n      //modalHeaderColor: \"\",\r\n      title: \"\",\r\n      inEditMode: false,\r\n      selectedDays: [],\r\n      validation: {\r\n        color: true,\r\n        pickedADay: false,\r\n        pleasePickADay: false,\r\n        title: true\r\n      }\r\n    });\r\n  };\r\n\r\n  closeHandler = () => {\r\n    this.props.onClose();\r\n    this.resetValues();\r\n  };\r\n\r\n  updateInputValue = handleInputChanges.bind(this);\r\n\r\n  setSelectedColor = colorTypeId => {\r\n    this.setState({ colorTypeId });\r\n    this.updateModalBgColor(colorTypeId);\r\n  };\r\n\r\n  handleDayChange = e => {\r\n    this.updateInputValue(e);\r\n    this.setState({\r\n      startDate: moment(\"11012015\", \"MMDDYYYY\").add(e.target.value, \"days\")\r\n    });\r\n  };\r\n\r\n  insertDeleteButton = () => {\r\n    if (this.state.inEditMode === true) {\r\n      return (\r\n        <button\r\n          className=\"btn btn-danger\"\r\n          onClick={() => {\r\n            this.props.delete(this.props.selectedEvent);\r\n            this.closeHandler();\r\n          }}\r\n        >\r\n          Delete\r\n        </button>\r\n      );\r\n    }\r\n  };\r\n\r\n  updateModalBgColor = id => {\r\n    let modalHeaderColor = this.props.colorIndex[id].color;\r\n    this.setState({ modalHeaderColor });\r\n  };\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (\r\n      this.props.start !== prevProps.start ||\r\n      this.props.end !== prevProps.end\r\n    ) {\r\n      this.setState({\r\n        startDate: moment(this.props.start),\r\n        startTime: moment(this.props.start),\r\n        endTime: moment(this.props.end),\r\n        dayOfWeek: moment(this.props.start).format(\"e\")\r\n      });\r\n    }\r\n    if (this.state.selectedDays !== prevState.selectedDays) {\r\n      //this.validateInputs();\r\n    }\r\n    if (this.props.selectedEvent !== prevProps.selectedEvent) {\r\n      let {\r\n        colorTypeId,\r\n        dayOfWeek,\r\n        start,\r\n        end,\r\n        title\r\n      } = this.props.selectedEvent;\r\n      if (colorTypeId) {\r\n        this.updateModalBgColor(colorTypeId);\r\n        this.setState({\r\n          inEditMode: true,\r\n          title,\r\n          colorTypeId,\r\n          dayOfWeek,\r\n          startTime: moment(start),\r\n          endTime: moment(end)\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  renderDayPicker = () => {\r\n    if (this.state.inEditMode === false) {\r\n      return (\r\n        <MultiDayPicker\r\n          dayOfWeek={this.state.dayOfWeek}\r\n          sendSelectedDays={this.setSelectedDays}\r\n          valid={this.state.validation.pleasePickADay}\r\n          listOfDays={daysOfWeek}\r\n        />\r\n      );\r\n    } else {\r\n      return (\r\n        <div className=\"form-group\" style={{ paddingBottom: \"0.1em\" }}>\r\n          <label>Day of Week</label>\r\n          <select\r\n            className=\"custom-select form-control mx-auto\"\r\n            name=\"dayOfWeek\"\r\n            value={this.state.dayOfWeek}\r\n            onChange={this.handleDayChange}\r\n          >\r\n            {daysOfWeek.map(day => this.populateDaysBox(day))}\r\n          </select>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  validateInputs = () => {\r\n    const {\r\n      colorTypeId,\r\n      validation,\r\n      inEditMode,\r\n      selectedDays,\r\n      title\r\n    } = this.state;\r\n    title.length > 0 ? (validation.title = true) : (validation.title = false);\r\n    Number.isInteger(parseInt(colorTypeId))\r\n      ? (validation.color = true)\r\n      : (validation.color = false);\r\n    if (!inEditMode) {\r\n      if (selectedDays.length === 0) {\r\n        validation.pickedADay = false;\r\n        validation.pleasePickADay = true;\r\n      } else {\r\n        validation.pickedADay = true;\r\n        validation.pleasePickADay = false;\r\n      }\r\n    }\r\n    this.setState({ validation });\r\n  };\r\n\r\n  allValid = () => {\r\n    const { validation } = this.state;\r\n    if (this.state.inEditMode) {\r\n      if (validation.color) {\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n    if (\r\n      !this.state.inEditMode &&\r\n      validation.color &&\r\n      validation.pickedADay &&\r\n      validation.title\r\n    ) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { modalOpen } = this.props;\r\n    return (\r\n      <React.Fragment>\r\n        <Modal\r\n          style={{\r\n            maxWidth: 400,\r\n            minWidth: \"25em\",\r\n            position: \"relative\",\r\n            top: \"10\" // original 25\r\n          }}\r\n          isOpen={modalOpen}\r\n          toggle={() => this.closeHandler()}\r\n          modalTransition={{ timeout: 10 }}\r\n          backdropTransition={{ timeout: 10 }}\r\n          //className={this.props.className} // this will auto-size the modal if enabled\r\n        >\r\n          <ModalHeader\r\n            style={{\r\n              position: \"relative\",\r\n              paddingTop: \"2em\",\r\n              width: \"100%\",\r\n              color: this.state.headerTextColor,\r\n              backgroundColor:\r\n                this.state.modalHeaderColor || this.state.defaultBgColor\r\n            }}\r\n          >\r\n            <div\r\n              className=\"text-center mx-auto\"\r\n              style={{\r\n                position: \"relative\",\r\n                top: \"-0.4em\",\r\n                marginBottom: \"-0.1em\",\r\n                float: \"right\"\r\n              }}\r\n            >\r\n              <big className=\"text-center\">\r\n                &nbsp;\r\n                {(this.state.inEditMode && \"Edit Your Saved Event\") ||\r\n                  this.state.addEventTitle}\r\n              </big>\r\n            </div>\r\n          </ModalHeader>\r\n          <ModalBody\r\n            style={{\r\n              position: \"relative\",\r\n              top: \"-0.5em\",\r\n              marginBottom: \"-0.9em\"\r\n            }}\r\n          >\r\n            <ListGroup>\r\n              <ListGroupItem className=\"border-0\">\r\n                <div\r\n                  className=\"mx-auto\"\r\n                  style={{ marginTop: \"0.6em\", paddingBottom: \"1.4em\" }}\r\n                >\r\n                  <FormGroup>\r\n                    <Label>Event Name</Label>\r\n                    <Input\r\n                      type=\"text\"\r\n                      name=\"title\"\r\n                      value={this.state.title}\r\n                      onChange={e => {\r\n                        this.setState({ [e.target.name]: e.target.value }, () =>\r\n                          this.validateInputs()\r\n                        );\r\n                      }}\r\n                      invalid={!this.state.validation.title}\r\n                    />\r\n                    <FormFeedback valid />\r\n                    <FormFeedback>This field is required</FormFeedback>\r\n                  </FormGroup>\r\n\r\n                  <FormGroup>\r\n                    <ColorPicker\r\n                      colorList={this.props.googleColors}\r\n                      selectedColor={this.state.modalHeaderColor}\r\n                      defaultColor={this.state.defaultBgColor}\r\n                      setSelectedColor={this.setSelectedColor}\r\n                    />\r\n                  </FormGroup>\r\n\r\n                  {this.renderDayPicker()}\r\n\r\n                  <div\r\n                    className=\"form-group\"\r\n                    style={{ minWidth: \"22em\", marginBottom: \"-0.0em\" }}\r\n                  >\r\n                    <label>Start/End Times</label>\r\n                    <div className=\"form-row\">\r\n                      <div\r\n                        className=\"col\"\r\n                        style={{ maxWidth: \"25%\", minWidth: \"8em\" }}\r\n                      >\r\n                        <DatePicker\r\n                          selected={this.state.startTime}\r\n                          onChange={startTime => {\r\n                            if (startTime > this.state.endTime) {\r\n                              this.setState({\r\n                                startTime,\r\n                                endTime: moment(startTime).add(15, \"minutes\")\r\n                              });\r\n                            } else {\r\n                              this.setState({ startTime });\r\n                            }\r\n                          }}\r\n                          showTimeSelect\r\n                          showTimeSelectOnly\r\n                          timeIntervals={15}\r\n                          className=\"form-control text-center\"\r\n                          minTime={moment(\"11012015 05:00\", \"MMDDYYYY HH:mm\")}\r\n                          maxTime={moment(\"11012015 23:30\", \"MMDDYYYY HH:mm\")}\r\n                          dateFormat=\"LT\"\r\n                        />\r\n                      </div>\r\n                      <div\r\n                        className=\"col text-center\"\r\n                        style={{\r\n                          maxWidth: \"8%\",\r\n                          minWidth: \"1em\",\r\n                          marginTop: \"0.6em\"\r\n                        }}\r\n                      >\r\n                        <label>to</label>\r\n                      </div>\r\n                      <div\r\n                        className=\"col\"\r\n                        style={{ maxWidth: \"25%\", minWidth: \"8em\" }}\r\n                      >\r\n                        <DatePicker\r\n                          selected={this.state.endTime}\r\n                          onChange={endTime => this.setState({ endTime })}\r\n                          showTimeSelect\r\n                          showTimeSelectOnly\r\n                          timeIntervals={15}\r\n                          minTime={moment(\r\n                            `11012015 ${moment(this.state.startTime)\r\n                              .add(15, \"minutes\")\r\n                              .format(\"HH:mm\")}`,\r\n                            \"MMDDYYYY HH:mm\"\r\n                          )}\r\n                          maxTime={moment(\"11012015 23:59\", \"MMDDYYYY HH:mm\")}\r\n                          className=\"form-control text-center\"\r\n                          dateFormat=\"LT\"\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"text-right\">\r\n                  {this.insertDeleteButton()}\r\n                  &nbsp;&nbsp;\r\n                  <button\r\n                    className=\"btn btn-primary\"\r\n                    onClick={() => {\r\n                      this.validateInputs();\r\n                      if (this.allValid()) {\r\n                        const data = this.getFormData();\r\n                        this.handleSubmission(data);\r\n                      }\r\n                    }}\r\n                  >\r\n                    {(this.state.inEditMode && \"Update\") || \"Add\"}\r\n                  </button>\r\n                </div>\r\n              </ListGroupItem>\r\n            </ListGroup>\r\n          </ModalBody>\r\n        </Modal>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddToTemplateModal;\r\n","import React from \"react\";\r\nimport { Modal, ModalBody, ModalHeader } from \"reactstrap\";\r\n\r\nclass GenericModal extends React.Component {\r\n  render() {\r\n    const { modalOpen, title, toggle, size } = this.props;\r\n    return (\r\n      <Modal isOpen={modalOpen} toggle={toggle} size={size || \"md\"}>\r\n        <ModalHeader>{title && title}</ModalHeader>\r\n        <ModalBody>\r\n          {this.props.children}\r\n          <br />\r\n          <button className=\"btn btn-muted text-right\" onClick={toggle}>\r\n            Close\r\n          </button>\r\n        </ModalBody>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GenericModal;\r\n","export default [\r\n  {\r\n    color: \"#5484ed\",\r\n    id: 9\r\n  },\r\n  {\r\n    color: \"#a4bdfc\",\r\n    id: 1\r\n  },\r\n  {\r\n    color: \"#7ae7bf\",\r\n    id: 2\r\n  },\r\n  {\r\n    color: \"#dbadff\",\r\n    id: 3\r\n  },\r\n  {\r\n    color: \"#ff887c\",\r\n    id: 4\r\n  },\r\n  {\r\n    color: \"#fbd75b\",\r\n    id: 5\r\n  },\r\n  {\r\n    color: \"#ffb878\",\r\n    id: 6\r\n  },\r\n  {\r\n    color: \"#46d6db\",\r\n    id: 7\r\n  },\r\n  {\r\n    color: \"#e1e1e1\",\r\n    id: 8\r\n  },\r\n  {\r\n    color: \"#51b749\",\r\n    id: 10\r\n  },\r\n  {\r\n    color: \"#dc2127\",\r\n    id: 11\r\n  }\r\n];\r\n","import React, { Component } from \"react\";\r\nimport BigCalendar from \"react-big-calendar\";\r\nimport moment from \"moment\";\r\nimport withDragAndDrop from \"react-big-calendar/lib/addons/dragAndDrop\";\r\nimport QuickCreateModal from \"./AddToTemplateModal\";\r\nimport Modal from \"./GenericModal\";\r\nimport googleColors from \"../data/googleColors\";\r\nimport \"../styles/custom-calendar.css\";\r\nimport \"react-big-calendar/lib/addons/dragAndDrop/styles.css\";\r\n\r\nconst DragAndDropCalendar = withDragAndDrop(BigCalendar);\r\nconst localizer = BigCalendar.momentLocalizer(moment);\r\n\r\nconst colorIndex = colorTypes => {\r\n  // transform array of colors into one object (to be used as an index for O(1) lookup)\r\n  const colorIndex = {};\r\n  const colorKeys = Object.keys(colorTypes[0]).filter(key => key !== \"id\");\r\n  for (const color of colorTypes) {\r\n    const colorData = {};\r\n    colorKeys.forEach(key => {\r\n      colorData[key] = color[key];\r\n    });\r\n    colorIndex[color.id] = colorData;\r\n  }\r\n  return colorIndex;\r\n};\r\n\r\nclass App extends Component {\r\n  state = {\r\n    events: [],\r\n    colorIndex: colorIndex(googleColors),\r\n    quickCreateModal: false,\r\n    selectedEvent: {},\r\n    newStartTime: null,\r\n    newEndTime: null,\r\n    showModal: false\r\n  };\r\n\r\n  updateCalendarFromQuickCreate = newEvents => {\r\n    let newEventsArr = newEvents.map(ev => this.reformatEventData(ev));\r\n    this.setState({\r\n      events: [...this.state.events, ...newEventsArr],\r\n      quickCreateModal: false\r\n    });\r\n  };\r\n\r\n  reformatEventData = event => {\r\n    let startDate = moment(\"11012015\", \"MMDDYYYY\")\r\n      .add(event.dayOfWeek, \"days\")\r\n      .format(\"YYYY-MM-DD\");\r\n    if (this.state.colorIndex[event.colorTypeId]) {\r\n      const colorData = this.state.colorIndex[event.colorTypeId];\r\n      let bgColor = colorData.color;\r\n      const updatedEvent = {\r\n        ...event,\r\n        start: new Date(`${startDate} ${event.startTime}`),\r\n        end: new Date(`${startDate} ${event.endTime}`),\r\n        bgColor\r\n      };\r\n      return updatedEvent;\r\n    } else {\r\n      // just in edge case\r\n      const updatedEvent = {\r\n        ...event,\r\n        start: new Date(`${startDate} ${event.startTime}`),\r\n        end: new Date(`${startDate} ${event.endTime}`),\r\n        bgColor: \"#4286f4\"\r\n      };\r\n      return updatedEvent;\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    let returningUser = localStorage.getItem(\"returningUser\");\r\n    if (!returningUser) {\r\n      localStorage.setItem(\"returningUser\", true);\r\n      this.setState({ showModal: true });\r\n    }\r\n    let savedData = localStorage.getItem(\"schedule\");\r\n    if (savedData) {\r\n      const parsed = JSON.parse(savedData);\r\n      const events = parsed.map(ev => this.reformatEventData(ev));\r\n      this.setState({ events });\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (this.state.events !== prevState.events) {\r\n      const events = JSON.stringify(this.state.events);\r\n      localStorage.setItem(\"schedule\", events);\r\n    }\r\n  }\r\n\r\n  closeModalHandler = () => {\r\n    this.setState({\r\n      quickCreateModal: false,\r\n      selectedEvent: {}\r\n    });\r\n  };\r\n\r\n  quickRemoveFromCalendar = event => {\r\n    let events = this.state.events.filter(ev => ev !== event);\r\n    this.setState({ events });\r\n  };\r\n\r\n  moveEventHandler = this.onMoveEvent.bind(this);\r\n\r\n  onMoveEvent({ event, start, end }) {\r\n    let startDate = moment(start).format(\"DD\");\r\n    let endDate = moment(end).format(\"DD\");\r\n    let endDateTime = end;\r\n    if (startDate !== endDate) {\r\n      endDateTime = moment(start)\r\n        .hours(23)\r\n        .minutes(59)\r\n        .toDate();\r\n    }\r\n    this.prepareMovedEventForUpdate(event, start, endDateTime);\r\n  }\r\n\r\n  prepareMovedEventForUpdate = (event, newStart, newEnd) => {\r\n    let dayOfWeek = moment(newStart).format(\"e\");\r\n    let startTime = moment(newStart).format(\"HH:mm\");\r\n    let endTime = moment(newEnd).format(\"HH:mm\");\r\n    const updatedEvent = {\r\n      ...event,\r\n      dayOfWeek,\r\n      startTime,\r\n      endTime\r\n    };\r\n    this.renderMovedEvent(event, updatedEvent, newStart, newEnd);\r\n  };\r\n\r\n  renderUpdatedEvent(original, event) {\r\n    const { events } = this.state;\r\n    let reformatted = this.reformatEventData(event);\r\n    let remaining = events.filter(ev => ev !== original);\r\n    this.setState({\r\n      events: [...remaining, reformatted],\r\n      quickCreateModal: false,\r\n      selectedEvent: {}\r\n    });\r\n  }\r\n\r\n  renderMovedEvent(original, event, start, end) {\r\n    const { events } = this.state;\r\n    const updatedEvent = { ...event, start, end };\r\n    const remaining = events.filter(ev => ev !== original);\r\n    this.setState({\r\n      events: [...remaining, updatedEvent]\r\n    });\r\n  }\r\n\r\n  setEventCellStyling = event => {\r\n    let color = event.bgColor;\r\n    let style = {\r\n      background: `rgba(${parseInt(color.substring(1, 3), 16)}, ${parseInt(\r\n        color.substring(3, 5),\r\n        16\r\n      )}, ${parseInt(color.substring(5, 7), 16)}, 0.99)`\r\n    };\r\n    return { style };\r\n  };\r\n\r\n  onCalendarEventSelection = event => {\r\n    this.setState({\r\n      selectedEvent: event,\r\n      quickCreateModal: true\r\n    });\r\n  };\r\n\r\n  calendarSelectionHandler = slotInfo => {\r\n    let newEventStart = parseInt(moment(slotInfo.start).format(\"x\"));\r\n    let newEventEnd = parseInt(moment(slotInfo.end).format(\"x\"));\r\n\r\n    this.setState({\r\n      newEventStart,\r\n      newEventEnd,\r\n      quickCreateModal: true\r\n    });\r\n    //console.log(slotInfo);\r\n  };\r\n\r\n  closeModal = () => this.setState({ showModal: false });\r\n\r\n  render() {\r\n    let calDateTimeFormatting = {\r\n      dayFormat: (date, culture, localizer) =>\r\n        localizer.format(date, \"dddd\", culture),\r\n      timeGutterFormat: (date, culture, localizer) =>\r\n        localizer.format(date, \"h a\", culture)\r\n    };\r\n    return (\r\n      <div className=\"container-fluid\">\r\n        <div className=\"form-row\">\r\n          <div className=\"col\" />\r\n          <div className=\"col text-center\">\r\n            <h2\r\n              className=\"text-center\"\r\n              style={{ position: \"relative\", bottom: \"-0.3em\" }}\r\n            >\r\n              Week Planner\r\n            </h2>\r\n          </div>\r\n          <div className=\"col text-right\">\r\n            <button\r\n              className=\"btn btn-lg btn-dark\"\r\n              onClick={() => this.setState({ quickCreateModal: true })}\r\n              style={{\r\n                position: \"relative\",\r\n                top: \"0.3em\",\r\n                borderRadius: \"1.8em\",\r\n                margin: \"0 1em 0.8em 0\"\r\n              }}\r\n            >\r\n              <i className=\"zmdi zmdi-plus text-white zmdi-hc-lg\" />\r\n            </button>\r\n          </div>\r\n        </div>\r\n        <DragAndDropCalendar\r\n          {...this.props}\r\n          localizer={localizer}\r\n          selectable=\"ignoreEvents\"\r\n          events={this.state.events}\r\n          defaultDate={new Date(2015, 10, 1, 0)}\r\n          defaultView={\"week\"}\r\n          views={[\"week\"]}\r\n          step={15}\r\n          timeslots={4}\r\n          toolbar={false}\r\n          min={moment()\r\n            .hours(5)\r\n            .minutes(0)\r\n            .toDate()}\r\n          formats={calDateTimeFormatting}\r\n          onEventDrop={this.moveEventHandler}\r\n          eventPropGetter={this.setEventCellStyling}\r\n          onSelectEvent={this.onCalendarEventSelection}\r\n          onSelectSlot={this.calendarSelectionHandler}\r\n        />\r\n        <QuickCreateModal\r\n          start={this.state.newEventStart}\r\n          selectedEvent={this.state.selectedEvent}\r\n          colorIndex={this.state.colorIndex}\r\n          end={this.state.newEventEnd}\r\n          modalOpen={this.state.quickCreateModal}\r\n          onClose={this.closeModalHandler.bind(this)}\r\n          googleColors={googleColors}\r\n          sendEventToCalendar={this.updateCalendarFromQuickCreate}\r\n          showUpdatedEvent={this.renderUpdatedEvent.bind(this)}\r\n          delete={this.quickRemoveFromCalendar}\r\n        />\r\n        <Modal\r\n          modalOpen={this.state.showModal}\r\n          toggle={() => this.closeModal()}\r\n          title=\"How to Use the Workweek Planner\"\r\n          size=\"lg\"\r\n        >\r\n          \"Hello\"\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n\r\n              // Execute callback\r\n              if (config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Planner from \"./components/Planner\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\n\r\nReactDOM.render(<Planner />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}