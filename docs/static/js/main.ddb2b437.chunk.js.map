{"version":3,"sources":["utilities/inputUtilities.js","utilities/dateTimeFormatter.js","components/MultiDayPicker.js","components/ColorPicker.js","components/AddToTemplateModal.js","data/googleColors.js","Planner.js","serviceWorker.js","index.js"],"names":["handleInputChanges","event","name","target","val","value","this","setState","Object","defineProperty","formatToTimeString","time","moment","format","MultiDayPicker","state","isSunday","isMonday","isTuesday","isWednesday","isThursday","isFriday","isSaturday","selectedDays","dayToggle","e","_this","checked","getSelectedDays","_this$state","push","setDay","day","prevProps","prevState","daysOfWeek","props","sendSelectedDays","dayOfWeek","react_default","a","createElement","className","reactstrap_es","style","paddingTop","paddingBottom","type","id","onChange","htmlFor","valid","position","top","Component","ColorPicker","_ref","colorList","selectedColor","defaultColor","setSelectedColor","marginTop","caret","backgroundColor","modifiers","setMaxHeight","enabled","order","fn","data","objectSpread","styles","overflow","maxHeight","map","color","key","height","marginBottom","onClick","populateColors","AddToTemplateModal","inEditMode","colorTypeId","headerTextColor","defaultBgColor","modalHeaderColor","title","addEventTitle","startDate","startTime","endTime","daysDataList","short","letter","validation","pickedADay","pleasePickADay","populateDaysBox","setSelectedDays","length","validateInputs","getFormData","parseInt","handleSubmission","sendUpdatedEvent","selectedEvent","newEvents","sendEventToCalendar","original","resetValues","showUpdatedEvent","closeHandler","onClose","updateInputValue","bind","assertThisInitialized","updateModalBgColor","handleDayChange","add","insertDeleteButton","delete","colorIndex","renderDayPicker","components_MultiDayPicker","Number","isInteger","allValid","start","end","_this$props$selectedE","_this2","modalOpen","Fragment","maxWidth","minWidth","isOpen","toggle","modalTransition","timeout","backdropTransition","width","float","invalid","components_ColorPicker","googleColors","es","selected","showTimeSelect","showTimeSelectOnly","timeIntervals","minTime","maxTime","dateFormat","concat","DragAndDropCalendar","withDragAndDrop","BigCalendar","localizer","momentLocalizer","colorTypes","colorKeys","keys","filter","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_loop","colorData","forEach","_iterator","Symbol","iterator","next","done","err","return","App","events","quickCreateModal","newStartTime","newEndTime","pageSettings","abbr","updateCalendarFromQuickCreate","newEventsArr","ev","reformatEventData","toConsumableArray","bgColor","Date","closeModalHandler","quickRemoveFromCalendar","moveEventHandler","onMoveEvent","prepareMovedEventForUpdate","newStart","newEnd","updatedEvent","renderMovedEvent","setEventCellStyling","background","substring","onCalendarEventSelection","calendarSelectionHandler","slotInfo","newEventStart","newEventEnd","savedData","localStorage","getItem","JSON","parse","stringify","setItem","endDateTime","hours","minutes","toDate","reformatted","remaining","_this3","bottom","borderRadius","margin","assign","selectable","defaultDate","defaultView","views","step","timeslots","toolbar","min","formats","dayFormat","date","culture","timeGutterFormat","onEventDrop","eventPropGetter","onSelectEvent","onSelectSlot","components_AddToTemplateModal","renderUpdatedEvent","Boolean","window","location","hostname","match","ReactDOM","render","Planner","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ddb2b437.chunk.js","sourcesContent":["const handleInputChanges = function(event) {\r\n  let name = event.target.name;\r\n  let val = event.target.value;\r\n  this.setState({ [name]: val });\r\n};\r\n\r\nexport { handleInputChanges };\r\n","import moment from \"moment\";\r\nconst formatToDateString = date => moment(date).format(\"YYYY-MM-DD\");\r\nconst formatToTimeString = time => moment(time).format(\"HH:mm\");\r\n\r\nexport { formatToDateString, formatToTimeString };\r\n","import React, { Component } from \"react\";\r\nimport { Label, FormGroup } from \"reactstrap\";\r\n\r\nclass MultiDayPicker extends Component {\r\n  state = {\r\n    isSunday: false,\r\n    isMonday: false,\r\n    isTuesday: false,\r\n    isWednesday: false,\r\n    isThursday: false,\r\n    isFriday: false,\r\n    isSaturday: false,\r\n    selectedDays: []\r\n  };\r\n\r\n  dayToggle = e => this.setState({ [e.target.name]: e.target.checked });\r\n\r\n  getSelectedDays = () => {\r\n    let selectedDays = [];\r\n    const {\r\n      isSunday,\r\n      isMonday,\r\n      isTuesday,\r\n      isWednesday,\r\n      isThursday,\r\n      isFriday,\r\n      isSaturday\r\n    } = this.state;\r\n\r\n    if (isSunday) selectedDays.push(0);\r\n    if (isMonday) selectedDays.push(1);\r\n    if (isTuesday) selectedDays.push(2);\r\n    if (isWednesday) selectedDays.push(3);\r\n    if (isThursday) selectedDays.push(4);\r\n    if (isFriday) selectedDays.push(5);\r\n    if (isSaturday) selectedDays.push(6);\r\n\r\n    return selectedDays;\r\n  };\r\n\r\n  setDay = day => {\r\n    switch (day) {\r\n      case \"0\":\r\n        this.setState({ isSunday: true });\r\n        break;\r\n      case \"1\":\r\n        this.setState({ isMonday: true });\r\n        break;\r\n      case \"2\":\r\n        this.setState({ isTuesday: true });\r\n        break;\r\n      case \"3\":\r\n        this.setState({ isWednesday: true });\r\n        break;\r\n      case \"4\":\r\n        this.setState({ isThursday: true });\r\n        break;\r\n      case \"5\":\r\n        this.setState({ isFriday: true });\r\n        break;\r\n      case \"6\":\r\n        this.setState({ isSaturday: true });\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (this.state !== prevState) {\r\n      let daysOfWeek = this.getSelectedDays();\r\n      this.props.sendSelectedDays(daysOfWeek);\r\n    }\r\n    if (this.props.dayOfWeek !== prevProps.dayOfWeek) {\r\n      this.setDay(this.props.dayOfWeek);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"weekDays-selector\">\r\n        <Label style={{ paddingTop: \"0.2em\", paddingBottom: \"0.2em\" }}>\r\n          Select multiple days for a repeating event\r\n        </Label>\r\n\r\n        <FormGroup className=\"d-flex justify-content-center\">\r\n          <input\r\n            type=\"checkbox\"\r\n            id=\"weekday-sun\"\r\n            name=\"isSunday\"\r\n            checked={this.state.isSunday}\r\n            onChange={this.dayToggle}\r\n            className=\"weekday\"\r\n          />\r\n          <label htmlFor=\"weekday-sun\">S</label>\r\n          <input\r\n            type=\"checkbox\"\r\n            id=\"weekday-mon\"\r\n            name=\"isMonday\"\r\n            checked={this.state.isMonday}\r\n            onChange={this.dayToggle}\r\n            className=\"weekday\"\r\n          />\r\n          <label htmlFor=\"weekday-mon\">M</label>\r\n          <input\r\n            type=\"checkbox\"\r\n            id=\"weekday-tue\"\r\n            name=\"isTuesday\"\r\n            checked={this.state.isTuesday}\r\n            onChange={this.dayToggle}\r\n            className=\"weekday\"\r\n          />\r\n          <label htmlFor=\"weekday-tue\">T</label>\r\n          <input\r\n            type=\"checkbox\"\r\n            id=\"weekday-wed\"\r\n            name=\"isWednesday\"\r\n            checked={this.state.isWednesday}\r\n            onChange={this.dayToggle}\r\n            className=\"weekday\"\r\n          />\r\n          <label htmlFor=\"weekday-wed\">W</label>\r\n          <input\r\n            type=\"checkbox\"\r\n            id=\"weekday-thu\"\r\n            name=\"isThursday\"\r\n            checked={this.state.isThursday}\r\n            onChange={this.dayToggle}\r\n            className=\"weekday\"\r\n          />\r\n          <label htmlFor=\"weekday-thu\">TH</label>\r\n          <input\r\n            type=\"checkbox\"\r\n            id=\"weekday-fri\"\r\n            name=\"isFriday\"\r\n            checked={this.state.isFriday}\r\n            onChange={this.dayToggle}\r\n            className=\"weekday\"\r\n          />\r\n          <label htmlFor=\"weekday-fri\">F</label>\r\n          <input\r\n            type=\"checkbox\"\r\n            id=\"weekday-sat\"\r\n            name=\"isSaturday\"\r\n            checked={this.state.isSaturday}\r\n            onChange={this.dayToggle}\r\n            className=\"weekday\"\r\n          />\r\n          <label htmlFor=\"weekday-sat\">S</label>\r\n        </FormGroup>\r\n        {this.props.valid && (\r\n          <small\r\n            className=\"text-danger\"\r\n            style={{ position: \"relative\", top: \"-1em\" }}\r\n          >\r\n            At least one day is required\r\n          </small>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MultiDayPicker;\r\n","import React from \"react\";\r\nimport {\r\n  UncontrolledDropdown,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  DropdownItem\r\n} from \"reactstrap\";\r\n\r\nconst ColorPicker = ({\r\n  colorList,\r\n  selectedColor,\r\n  defaultColor,\r\n  setSelectedColor\r\n}) => {\r\n  const populateColors = color => {\r\n    return (\r\n      <DropdownItem\r\n        key={color.id}\r\n        style={{\r\n          backgroundColor: color.color,\r\n          height: \"2em\",\r\n          marginBottom: \"0.15em\"\r\n        }}\r\n        onClick={() => setSelectedColor(color.id)}\r\n        className=\"colorBox-cursor\"\r\n      />\r\n    );\r\n  };\r\n\r\n  return (\r\n    <UncontrolledDropdown style={{ marginTop: \"1.5em\" }}>\r\n      <DropdownToggle\r\n        caret\r\n        style={{ backgroundColor: selectedColor || defaultColor }}\r\n      >\r\n        Event Color\r\n      </DropdownToggle>\r\n      <DropdownMenu\r\n        modifiers={{\r\n          setMaxHeight: {\r\n            enabled: true,\r\n            order: 890,\r\n            fn: data => {\r\n              return {\r\n                ...data,\r\n                styles: {\r\n                  ...data.styles,\r\n                  overflow: \"auto\",\r\n                  maxHeight: 160\r\n                }\r\n              };\r\n            }\r\n          }\r\n        }}\r\n      >\r\n        {(colorList || []).map(color => populateColors(color))}\r\n      </DropdownMenu>\r\n    </UncontrolledDropdown>\r\n  );\r\n};\r\n\r\nexport default ColorPicker;\r\n","import React, { Component } from \"react\";\r\nimport moment from \"moment\";\r\nimport {\r\n  Input,\r\n  Label,\r\n  FormGroup,\r\n  ListGroup,\r\n  ListGroupItem,\r\n  Modal,\r\n  ModalBody,\r\n  ModalHeader,\r\n  FormFeedback\r\n} from \"reactstrap\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"../styles/react-datepicker.css\";\r\nimport { handleInputChanges } from \"../utilities/inputUtilities\";\r\nimport { formatToTimeString } from \"../utilities/dateTimeFormatter\";\r\nimport \"../styles/zmdi-buttons.css\";\r\nimport MultiDayPicker from \"./MultiDayPicker\";\r\nimport ColorPicker from \"./ColorPicker\";\r\n\r\nclass AddToTemplateModal extends Component {\r\n  state = {\r\n    selectedDays: [],\r\n    inEditMode: false,\r\n    colorTypeId: \"9\",\r\n    dayOfWeek: \"\",\r\n    headerTextColor: \"white\",\r\n    defaultBgColor: \"#5484ed\",\r\n    modalHeaderColor: \"\",\r\n    title: \"\",\r\n    addEventTitle: \"Add to Your Schedule\",\r\n    startDate: moment(\"11012015\", \"MMDDYYYY\"),\r\n    startTime: moment(\"11012015 08:00\", \"MMDDYYYY HH:mm\"),\r\n    endTime: moment(\"11012015 10:00\", \"MMDDYYYY HH:mm\"),\r\n    daysDataList: [\r\n      { id: 0, name: \"Sunday\", short: \"Sun\", letter: \"S\" },\r\n      { id: 1, name: \"Monday\", short: \"Mon\", letter: \"M\" },\r\n      { id: 2, name: \"Tuesday\", short: \"Tue\", letter: \"T\" },\r\n      { id: 3, name: \"Wednesday\", short: \"Wed\", letter: \"W\" },\r\n      { id: 4, name: \"Thursday\", short: \"Thu\", letter: \"T\" },\r\n      { id: 5, name: \"Friday\", short: \"Fri\", letter: \"F\" },\r\n      { id: 6, name: \"Saturday\", short: \"Sat\", letter: \"S\" }\r\n    ],\r\n    validation: {\r\n      color: true,\r\n      pickedADay: false,\r\n      pleasePickADay: false,\r\n      title: true\r\n    }\r\n  };\r\n\r\n  populateDaysBox = dayOfWeek => {\r\n    return (\r\n      <option key={dayOfWeek.id} value={dayOfWeek.id}>\r\n        {dayOfWeek.name}\r\n      </option>\r\n    );\r\n  };\r\n\r\n  setSelectedDays = selectedDays => {\r\n    this.setState({ selectedDays }, () => {\r\n      if (selectedDays.length !== 0 && this.state.validation.pleasePickADay)\r\n        this.validateInputs();\r\n    });\r\n  };\r\n\r\n  getFormData = () => {\r\n    let startTime = formatToTimeString(this.state.startTime);\r\n    let endTime = formatToTimeString(this.state.endTime);\r\n    let colorTypeId = parseInt(this.state.colorTypeId);\r\n    const newEventData = {\r\n      colorTypeId,\r\n      startTime,\r\n      endTime,\r\n      dayOfWeek: parseInt(this.state.dayOfWeek),\r\n      title: this.state.title\r\n    };\r\n    return newEventData;\r\n  };\r\n\r\n  handleSubmission = event => {\r\n    if (this.state.inEditMode) {\r\n      this.sendUpdatedEvent(this.props.selectedEvent, event);\r\n    } else {\r\n      let newEvents = this.state.selectedDays.map(day => {\r\n        let dayOfWeek = day;\r\n        let { colorTypeId, title, startTime, endTime } = event;\r\n        return { colorTypeId, title, startTime, endTime, dayOfWeek };\r\n      });\r\n      this.sendEventToCalendar(newEvents);\r\n    }\r\n  };\r\n\r\n  sendUpdatedEvent = (original, event) => {\r\n    this.resetValues();\r\n    this.props.showUpdatedEvent(original, event);\r\n  };\r\n\r\n  sendEventToCalendar = event => {\r\n    this.resetValues();\r\n    this.props.sendEventToCalendar(event);\r\n  };\r\n\r\n  resetValues = () => {\r\n    this.setState({\r\n      //colorTypeId: \"9\",\r\n      dayOfWeek: \"\",\r\n      //modalHeaderColor: \"\",\r\n      title: \"\",\r\n      inEditMode: false,\r\n      selectedDays: [],\r\n      validation: {\r\n        color: true,\r\n        pickedADay: false,\r\n        pleasePickADay: false,\r\n        title: true\r\n      }\r\n    });\r\n  };\r\n\r\n  closeHandler = () => {\r\n    this.props.onClose();\r\n    this.resetValues();\r\n  };\r\n\r\n  updateInputValue = handleInputChanges.bind(this);\r\n\r\n  setSelectedColor = colorTypeId => {\r\n    this.setState({ colorTypeId });\r\n    this.updateModalBgColor(colorTypeId);\r\n  };\r\n\r\n  handleDayChange = e => {\r\n    this.updateInputValue(e);\r\n    this.setState({\r\n      startDate: moment(\"11012015\", \"MMDDYYYY\").add(e.target.value, \"days\")\r\n    });\r\n  };\r\n\r\n  insertDeleteButton = () => {\r\n    if (this.state.inEditMode === true) {\r\n      return (\r\n        <button\r\n          className=\"btn btn-danger\"\r\n          onClick={() => {\r\n            this.props.delete(this.props.selectedEvent);\r\n            this.closeHandler();\r\n          }}\r\n        >\r\n          Delete\r\n        </button>\r\n      );\r\n    }\r\n  };\r\n\r\n  updateModalBgColor = id => {\r\n    let modalHeaderColor = this.props.colorIndex[id].color;\r\n    this.setState({ modalHeaderColor });\r\n  };\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (\r\n      this.props.start !== prevProps.start ||\r\n      this.props.end !== prevProps.end\r\n    ) {\r\n      this.setState({\r\n        startDate: moment(this.props.start),\r\n        startTime: moment(this.props.start),\r\n        endTime: moment(this.props.end),\r\n        dayOfWeek: moment(this.props.start).format(\"e\")\r\n      });\r\n    }\r\n    if (this.state.selectedDays !== prevState.selectedDays) {\r\n      //this.validateInputs();\r\n    }\r\n    if (this.props.selectedEvent !== prevProps.selectedEvent) {\r\n      let {\r\n        colorTypeId,\r\n        dayOfWeek,\r\n        start,\r\n        end,\r\n        title\r\n      } = this.props.selectedEvent;\r\n      if (colorTypeId) {\r\n        this.updateModalBgColor(colorTypeId);\r\n        this.setState({\r\n          inEditMode: true,\r\n          title,\r\n          colorTypeId,\r\n          dayOfWeek,\r\n          startTime: moment(start),\r\n          endTime: moment(end)\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  renderDayPicker = () => {\r\n    if (this.state.inEditMode === false) {\r\n      return (\r\n        <MultiDayPicker\r\n          dayOfWeek={this.state.dayOfWeek}\r\n          sendSelectedDays={this.setSelectedDays}\r\n          valid={this.state.validation.pleasePickADay}\r\n        />\r\n      );\r\n    } else {\r\n      return (\r\n        <div className=\"form-group\" style={{ paddingBottom: \"0.1em\" }}>\r\n          <label>Day of Week</label>\r\n          <select\r\n            className=\"custom-select form-control mx-auto\"\r\n            name=\"dayOfWeek\"\r\n            value={this.state.dayOfWeek}\r\n            onChange={this.handleDayChange}\r\n          >\r\n            {(this.state.daysDataList || []).map(day =>\r\n              this.populateDaysBox(day)\r\n            )}\r\n          </select>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  validateInputs = () => {\r\n    const {\r\n      colorTypeId,\r\n      validation,\r\n      inEditMode,\r\n      selectedDays,\r\n      title\r\n    } = this.state;\r\n    title.length > 0 ? (validation.title = true) : (validation.title = false);\r\n    Number.isInteger(parseInt(colorTypeId))\r\n      ? (validation.color = true)\r\n      : (validation.color = false);\r\n    if (!inEditMode) {\r\n      if (selectedDays.length === 0) {\r\n        validation.pickedADay = false;\r\n        validation.pleasePickADay = true;\r\n      } else {\r\n        validation.pickedADay = true;\r\n        validation.pleasePickADay = false;\r\n      }\r\n    }\r\n    this.setState({ validation });\r\n  };\r\n\r\n  allValid = () => {\r\n    const { validation } = this.state;\r\n    if (this.state.inEditMode) {\r\n      if (validation.color) {\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n    if (\r\n      !this.state.inEditMode &&\r\n      validation.color &&\r\n      validation.pickedADay &&\r\n      validation.title\r\n    ) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { modalOpen } = this.props;\r\n    return (\r\n      <React.Fragment>\r\n        <Modal\r\n          style={{\r\n            maxWidth: 400,\r\n            minWidth: \"25em\",\r\n            position: \"relative\",\r\n            top: \"10\" // original 25\r\n          }}\r\n          isOpen={modalOpen}\r\n          toggle={() => this.closeHandler()}\r\n          modalTransition={{ timeout: 10 }}\r\n          backdropTransition={{ timeout: 10 }}\r\n          //className={this.props.className} // this will auto-size the modal if enabled\r\n        >\r\n          <ModalHeader\r\n            style={{\r\n              position: \"relative\",\r\n              paddingTop: \"2em\",\r\n              width: \"100%\",\r\n              color: this.state.headerTextColor,\r\n              backgroundColor:\r\n                this.state.modalHeaderColor || this.state.defaultBgColor\r\n            }}\r\n          >\r\n            <div\r\n              className=\"text-center mx-auto\"\r\n              style={{\r\n                position: \"relative\",\r\n                top: \"-0.4em\",\r\n                marginBottom: \"-0.1em\",\r\n                float: \"right\"\r\n              }}\r\n            >\r\n              <big className=\"text-center\">\r\n                &nbsp;\r\n                {(this.state.inEditMode && \"Edit Your Saved Event\") ||\r\n                  this.state.addEventTitle}\r\n              </big>\r\n            </div>\r\n          </ModalHeader>\r\n          <ModalBody\r\n            style={{\r\n              position: \"relative\",\r\n              top: \"-0.5em\",\r\n              marginBottom: \"-0.9em\"\r\n            }}\r\n          >\r\n            <ListGroup>\r\n              <ListGroupItem className=\"border-0\">\r\n                <div\r\n                  className=\"mx-auto\"\r\n                  style={{ marginTop: \"0.6em\", paddingBottom: \"1.4em\" }}\r\n                >\r\n                  <FormGroup>\r\n                    <Label>Event Name</Label>\r\n                    <Input\r\n                      type=\"text\"\r\n                      name=\"title\"\r\n                      value={this.state.title}\r\n                      onChange={e => {\r\n                        this.setState({ [e.target.name]: e.target.value }, () =>\r\n                          this.validateInputs()\r\n                        );\r\n                      }}\r\n                      invalid={!this.state.validation.title}\r\n                    />\r\n                    <FormFeedback valid />\r\n                    <FormFeedback>This field is required</FormFeedback>\r\n                  </FormGroup>\r\n\r\n                  <FormGroup>\r\n                    <ColorPicker\r\n                      colorList={this.props.googleColors}\r\n                      selectedColor={this.state.modalHeaderColor}\r\n                      defaultColor={this.state.defaultBgColor}\r\n                      setSelectedColor={this.setSelectedColor}\r\n                    />\r\n                  </FormGroup>\r\n\r\n                  {this.renderDayPicker()}\r\n\r\n                  <div\r\n                    className=\"form-group\"\r\n                    style={{ minWidth: \"22em\", marginBottom: \"-0.0em\" }}\r\n                  >\r\n                    <label>Start/End Times</label>\r\n                    <div className=\"form-row\">\r\n                      <div\r\n                        className=\"col\"\r\n                        style={{ maxWidth: \"25%\", minWidth: \"8em\" }}\r\n                      >\r\n                        <DatePicker\r\n                          selected={this.state.startTime}\r\n                          onChange={startTime => {\r\n                            if (startTime > this.state.endTime) {\r\n                              this.setState({\r\n                                startTime,\r\n                                endTime: moment(startTime).add(15, \"minutes\")\r\n                              });\r\n                            } else {\r\n                              this.setState({ startTime });\r\n                            }\r\n                          }}\r\n                          showTimeSelect\r\n                          showTimeSelectOnly\r\n                          timeIntervals={15}\r\n                          className=\"form-control text-center\"\r\n                          minTime={moment(\"11012015 05:00\", \"MMDDYYYY HH:mm\")}\r\n                          maxTime={moment(\"11012015 23:30\", \"MMDDYYYY HH:mm\")}\r\n                          dateFormat=\"LT\"\r\n                        />\r\n                      </div>\r\n                      <div\r\n                        className=\"col text-center\"\r\n                        style={{\r\n                          maxWidth: \"8%\",\r\n                          minWidth: \"1em\",\r\n                          marginTop: \"0.6em\"\r\n                        }}\r\n                      >\r\n                        <label>to</label>\r\n                      </div>\r\n                      <div\r\n                        className=\"col\"\r\n                        style={{ maxWidth: \"25%\", minWidth: \"8em\" }}\r\n                      >\r\n                        <DatePicker\r\n                          selected={this.state.endTime}\r\n                          onChange={endTime => this.setState({ endTime })}\r\n                          showTimeSelect\r\n                          showTimeSelectOnly\r\n                          timeIntervals={15}\r\n                          minTime={moment(\r\n                            `11012015 ${moment(this.state.startTime)\r\n                              .add(15, \"minutes\")\r\n                              .format(\"HH:mm\")}`,\r\n                            \"MMDDYYYY HH:mm\"\r\n                          )}\r\n                          maxTime={moment(\"11012015 23:59\", \"MMDDYYYY HH:mm\")}\r\n                          className=\"form-control text-center\"\r\n                          dateFormat=\"LT\"\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"text-right\">\r\n                  {this.insertDeleteButton()}\r\n                  &nbsp;&nbsp;\r\n                  <button\r\n                    className=\"btn btn-primary\"\r\n                    onClick={() => {\r\n                      this.validateInputs();\r\n                      if (this.allValid()) {\r\n                        const data = this.getFormData();\r\n                        this.handleSubmission(data);\r\n                      }\r\n                    }}\r\n                  >\r\n                    {(this.state.inEditMode && \"Update\") || \"Add\"}\r\n                  </button>\r\n                </div>\r\n              </ListGroupItem>\r\n            </ListGroup>\r\n          </ModalBody>\r\n        </Modal>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddToTemplateModal;\r\n","export default [\r\n  {\r\n    color: \"#5484ed\",\r\n    id: 9\r\n  },\r\n  {\r\n    color: \"#a4bdfc\",\r\n    id: 1\r\n  },\r\n  {\r\n    color: \"#7ae7bf\",\r\n    id: 2\r\n  },\r\n  {\r\n    color: \"#dbadff\",\r\n    id: 3\r\n  },\r\n  {\r\n    color: \"#ff887c\",\r\n    id: 4\r\n  },\r\n  {\r\n    color: \"#fbd75b\",\r\n    id: 5\r\n  },\r\n  {\r\n    color: \"#ffb878\",\r\n    id: 6\r\n  },\r\n  {\r\n    color: \"#46d6db\",\r\n    id: 7\r\n  },\r\n  {\r\n    color: \"#e1e1e1\",\r\n    id: 8\r\n  },\r\n  {\r\n    color: \"#51b749\",\r\n    id: 10\r\n  },\r\n  {\r\n    color: \"#dc2127\",\r\n    id: 11\r\n  }\r\n];\r\n","import React, { Component } from \"react\";\r\nimport BigCalendar from \"react-big-calendar\";\r\nimport moment from \"moment\";\r\nimport withDragAndDrop from \"react-big-calendar/lib/addons/dragAndDrop\";\r\nimport \"react-big-calendar/lib/addons/dragAndDrop/styles.css\";\r\nimport \"./styles/custom-calendar.css\";\r\nimport QuickCreateModal from \"./components/AddToTemplateModal\";\r\nimport googleColors from \"./data/googleColors\";\r\n\r\nconst DragAndDropCalendar = withDragAndDrop(BigCalendar);\r\nconst localizer = BigCalendar.momentLocalizer(moment);\r\n\r\nconst colorIndex = colorTypes => {\r\n  // transform array of colors into one object (to be used as an index for O(1) efficiency)\r\n  const colorIndex = {};\r\n  const colorKeys = Object.keys(colorTypes[0]).filter(key => key !== \"id\");\r\n  for (const color of colorTypes) {\r\n    const colorData = {};\r\n    colorKeys.forEach(key => {\r\n      colorData[key] = color[key];\r\n    });\r\n    colorIndex[color.id] = colorData;\r\n  }\r\n  return colorIndex;\r\n};\r\n\r\nclass App extends Component {\r\n  state = {\r\n    events: [],\r\n    colorIndex: colorIndex(googleColors),\r\n    quickCreateModal: false,\r\n    selectedEvent: {},\r\n    newStartTime: null,\r\n    newEndTime: null,\r\n    pageSettings: {\r\n      daysOfWeek: [\r\n        { id: 0, name: \"Sunday\", short: \"Sun\", abbr: \"S\" },\r\n        { id: 1, name: \"Monday\", short: \"Mon\", abbr: \"M\" },\r\n        { id: 2, name: \"Tuesday\", short: \"Tue\", abbr: \"T\" },\r\n        { id: 3, name: \"Wednesday\", short: \"Wed\", abbr: \"W\" },\r\n        { id: 4, name: \"Thursday\", short: \"Thu\", abbr: \"T\" },\r\n        { id: 5, name: \"Friday\", short: \"Fri\", abbr: \"F\" },\r\n        { id: 6, name: \"Saturday\", short: \"Sat\", abbr: \"S\" }\r\n      ]\r\n    }\r\n  };\r\n\r\n  updateCalendarFromQuickCreate = newEvents => {\r\n    let newEventsArr = newEvents.map(ev => this.reformatEventData(ev));\r\n    this.setState({\r\n      events: [...this.state.events, ...newEventsArr],\r\n      quickCreateModal: false\r\n    });\r\n  };\r\n\r\n  reformatEventData = event => {\r\n    let startDate = moment(\"11012015\", \"MMDDYYYY\")\r\n      .add(event.dayOfWeek, \"days\")\r\n      .format(\"YYYY-MM-DD\");\r\n    if (this.state.colorIndex[event.colorTypeId]) {\r\n      const colorData = this.state.colorIndex[event.colorTypeId];\r\n      let bgColor = colorData.color;\r\n      const updatedEvent = {\r\n        ...event,\r\n        start: new Date(`${startDate} ${event.startTime}`),\r\n        end: new Date(`${startDate} ${event.endTime}`),\r\n        bgColor\r\n      };\r\n      return updatedEvent;\r\n    } else {\r\n      // just in edge case\r\n      const updatedEvent = {\r\n        ...event,\r\n        start: new Date(`${startDate} ${event.startTime}`),\r\n        end: new Date(`${startDate} ${event.endTime}`),\r\n        bgColor: \"#4286f4\"\r\n      };\r\n      return updatedEvent;\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    let savedData = localStorage.getItem(\"schedule\");\r\n    if (savedData) {\r\n      const parsed = JSON.parse(savedData);\r\n      const events = parsed.map(ev => this.reformatEventData(ev));\r\n      this.setState({ events });\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (this.state.events !== prevState.events) {\r\n      const events = JSON.stringify(this.state.events);\r\n      localStorage.setItem(\"schedule\", events);\r\n    }\r\n  }\r\n\r\n  closeModalHandler = () => {\r\n    this.setState({\r\n      quickCreateModal: false,\r\n      selectedEvent: {}\r\n    });\r\n  };\r\n\r\n  quickRemoveFromCalendar = event => {\r\n    let events = this.state.events.filter(ev => ev !== event);\r\n    this.setState({ events });\r\n  };\r\n\r\n  moveEventHandler = this.onMoveEvent.bind(this);\r\n\r\n  onMoveEvent({ event, start, end }) {\r\n    let startDate = moment(start).format(\"DD\");\r\n    let endDate = moment(end).format(\"DD\");\r\n    let endDateTime = end;\r\n    if (startDate !== endDate) {\r\n      endDateTime = moment(start)\r\n        .hours(23)\r\n        .minutes(59)\r\n        .toDate();\r\n    }\r\n    this.prepareMovedEventForUpdate(event, start, endDateTime);\r\n  }\r\n\r\n  prepareMovedEventForUpdate = (event, newStart, newEnd) => {\r\n    let dayOfWeek = moment(newStart).format(\"e\");\r\n    let startTime = moment(newStart).format(\"HH:mm\");\r\n    let endTime = moment(newEnd).format(\"HH:mm\");\r\n    const updatedEvent = {\r\n      ...event,\r\n      dayOfWeek,\r\n      startTime,\r\n      endTime\r\n    };\r\n    this.renderMovedEvent(event, updatedEvent, newStart, newEnd);\r\n  };\r\n\r\n  renderUpdatedEvent(original, event) {\r\n    const { events } = this.state;\r\n    let reformatted = this.reformatEventData(event);\r\n    let remaining = events.filter(ev => ev !== original);\r\n    this.setState({\r\n      events: [...remaining, reformatted],\r\n      quickCreateModal: false,\r\n      selectedEvent: {}\r\n    });\r\n  }\r\n\r\n  renderMovedEvent(original, event, start, end) {\r\n    const { events } = this.state;\r\n    const updatedEvent = { ...event, start, end };\r\n    const remaining = events.filter(ev => ev !== original);\r\n    this.setState({\r\n      events: [...remaining, updatedEvent]\r\n    });\r\n  }\r\n\r\n  setEventCellStyling = event => {\r\n    let color = event.bgColor;\r\n    let style = {\r\n      background: `rgba(${parseInt(color.substring(1, 3), 16)}, ${parseInt(\r\n        color.substring(3, 5),\r\n        16\r\n      )}, ${parseInt(color.substring(5, 7), 16)}, 0.99)`\r\n    };\r\n    return { style };\r\n  };\r\n\r\n  onCalendarEventSelection = event => {\r\n    this.setState({\r\n      selectedEvent: event,\r\n      quickCreateModal: true\r\n    });\r\n  };\r\n\r\n  calendarSelectionHandler = slotInfo => {\r\n    let newEventStart = parseInt(moment(slotInfo.start).format(\"x\"));\r\n    let newEventEnd = parseInt(moment(slotInfo.end).format(\"x\"));\r\n\r\n    this.setState({\r\n      newEventStart,\r\n      newEventEnd,\r\n      quickCreateModal: true\r\n    });\r\n    //console.log(slotInfo);\r\n  };\r\n\r\n  render() {\r\n    let calDateTimeFormatting = {\r\n      dayFormat: (date, culture, localizer) =>\r\n        localizer.format(date, \"dddd\", culture),\r\n      timeGutterFormat: (date, culture, localizer) =>\r\n        localizer.format(date, \"h a\", culture)\r\n    };\r\n    return (\r\n      <div className=\"container-fluid\">\r\n        <div className=\"form-row\">\r\n          <div className=\"col\" />\r\n          <div className=\"col text-center\">\r\n            <h2\r\n              className=\"text-center\"\r\n              style={{ position: \"relative\", bottom: \"-0.3em\" }}\r\n            >\r\n              Week Planner\r\n            </h2>\r\n          </div>\r\n          <div className=\"col text-right\">\r\n            <button\r\n              className=\"btn-lg btn-primary\"\r\n              onClick={() => this.setState({ quickCreateModal: true })}\r\n              style={{\r\n                position: \"relative\",\r\n                top: \"0.3em\",\r\n                borderRadius: \"1.8em\",\r\n                margin: \"0 1em 0.8em 0\"\r\n              }}\r\n            >\r\n              <i className=\"zmdi zmdi-plus text-white zmdi-hc-lg\" />\r\n            </button>\r\n          </div>\r\n        </div>\r\n        <DragAndDropCalendar\r\n          {...this.props}\r\n          localizer={localizer}\r\n          selectable=\"ignoreEvents\"\r\n          events={this.state.events}\r\n          defaultDate={new Date(2015, 10, 1, 0)}\r\n          defaultView={\"week\"}\r\n          views={[\"week\"]}\r\n          step={15}\r\n          timeslots={4}\r\n          toolbar={false}\r\n          min={moment()\r\n            .hours(5)\r\n            .minutes(0)\r\n            .toDate()}\r\n          formats={calDateTimeFormatting}\r\n          onEventDrop={this.moveEventHandler}\r\n          eventPropGetter={this.setEventCellStyling}\r\n          onSelectEvent={this.onCalendarEventSelection}\r\n          onSelectSlot={this.calendarSelectionHandler}\r\n        />\r\n\r\n        <QuickCreateModal\r\n          start={this.state.newEventStart}\r\n          selectedEvent={this.state.selectedEvent}\r\n          colorIndex={this.state.colorIndex}\r\n          end={this.state.newEventEnd}\r\n          modalOpen={this.state.quickCreateModal}\r\n          onClose={this.closeModalHandler.bind(this)}\r\n          googleColors={googleColors}\r\n          sendEventToCalendar={this.updateCalendarFromQuickCreate}\r\n          showUpdatedEvent={this.renderUpdatedEvent.bind(this)}\r\n          delete={this.quickRemoveFromCalendar}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n\r\n              // Execute callback\r\n              if (config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n//import \"./index.css\";\r\nimport Planner from \"./Planner\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\n\r\nReactDOM.render(<Planner />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}