{"version":3,"sources":["utilities/inputUtilities.js","utilities/dateTimeFormatter.js","components/MultiDayPicker.js","components/ColorPicker.js","components/AddToTemplateModal.js","data/googleColors.js","Planner.js","serviceWorker.js","index.js"],"names":["handleInputChanges","event","name","target","val","value","this","setState","Object","defineProperty","formatToTimeString","time","moment","format","MultiDayPicker","state","Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","selectedDays","dayToggle","e","_this","checked","getSelectedDays","_this$state","push","setDay","day","index","parseInt","selectedDay","props","listOfDays","prevProps","prevState","daysOfWeek","sendSelectedDays","dayOfWeek","_this2","react_default","a","createElement","className","reactstrap_es","style","paddingTop","paddingBottom","map","Fragment","key","id","type","onChange","bind","htmlFor","letter","renderDayButton","valid","position","top","Component","ColorPicker","_ref","colorList","selectedColor","defaultColor","setSelectedColor","marginTop","caret","backgroundColor","modifiers","setMaxHeight","enabled","order","fn","data","objectSpread","styles","overflow","maxHeight","color","height","marginBottom","onClick","populateColors","AddToTemplateModal","inEditMode","colorTypeId","headerTextColor","defaultBgColor","modalHeaderColor","title","addEventTitle","startDate","startTime","endTime","daysDataList","short","validation","pickedADay","pleasePickADay","populateDaysBox","setSelectedDays","length","validateInputs","getFormData","handleSubmission","sendUpdatedEvent","selectedEvent","newEvents","sendEventToCalendar","original","resetValues","showUpdatedEvent","closeHandler","onClose","updateInputValue","assertThisInitialized","updateModalBgColor","handleDayChange","add","insertDeleteButton","delete","colorIndex","renderDayPicker","components_MultiDayPicker","Number","isInteger","allValid","start","end","_this$props$selectedE","modalOpen","maxWidth","minWidth","isOpen","toggle","modalTransition","timeout","backdropTransition","width","float","invalid","components_ColorPicker","googleColors","es","selected","showTimeSelect","showTimeSelectOnly","timeIntervals","minTime","maxTime","dateFormat","concat","DragAndDropCalendar","withDragAndDrop","BigCalendar","localizer","momentLocalizer","colorTypes","colorKeys","keys","filter","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_loop","colorData","forEach","_iterator","Symbol","iterator","next","done","err","return","App","events","quickCreateModal","newStartTime","newEndTime","pageSettings","abbr","updateCalendarFromQuickCreate","newEventsArr","ev","reformatEventData","toConsumableArray","bgColor","Date","closeModalHandler","quickRemoveFromCalendar","moveEventHandler","onMoveEvent","prepareMovedEventForUpdate","newStart","newEnd","updatedEvent","renderMovedEvent","setEventCellStyling","background","substring","onCalendarEventSelection","calendarSelectionHandler","slotInfo","newEventStart","newEventEnd","savedData","localStorage","getItem","JSON","parse","stringify","setItem","endDateTime","hours","minutes","toDate","reformatted","remaining","_this3","bottom","borderRadius","margin","assign","selectable","defaultDate","defaultView","views","step","timeslots","toolbar","min","formats","dayFormat","date","culture","timeGutterFormat","onEventDrop","eventPropGetter","onSelectEvent","onSelectSlot","components_AddToTemplateModal","renderUpdatedEvent","Boolean","window","location","hostname","match","ReactDOM","render","Planner","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6f2e4654.chunk.js","sourcesContent":["const handleInputChanges = function(event) {\r\n  let name = event.target.name;\r\n  let val = event.target.value;\r\n  this.setState({ [name]: val });\r\n};\r\n\r\nexport { handleInputChanges };\r\n","import moment from \"moment\";\r\nconst formatToDateString = date => moment(date).format(\"YYYY-MM-DD\");\r\nconst formatToTimeString = time => moment(time).format(\"HH:mm\");\r\n\r\nexport { formatToDateString, formatToTimeString };\r\n","import React, { Component } from \"react\";\r\nimport { Label, FormGroup } from \"reactstrap\";\r\n\r\nclass MultiDayPicker extends Component {\r\n  state = {\r\n    Sunday: false,\r\n    Monday: false,\r\n    Tuesday: false,\r\n    Wednesday: false,\r\n    Thursday: false,\r\n    Friday: false,\r\n    Saturday: false,\r\n    selectedDays: []\r\n  };\r\n\r\n  dayToggle = e => this.setState({ [e.target.name]: e.target.checked });\r\n\r\n  getSelectedDays = () => {\r\n    let selectedDays = [];\r\n    const {\r\n      Sunday,\r\n      Monday,\r\n      Tuesday,\r\n      Wednesday,\r\n      Thursday,\r\n      Friday,\r\n      Saturday\r\n    } = this.state;\r\n\r\n    if (Sunday) selectedDays.push(0);\r\n    if (Monday) selectedDays.push(1);\r\n    if (Tuesday) selectedDays.push(2);\r\n    if (Wednesday) selectedDays.push(3);\r\n    if (Thursday) selectedDays.push(4);\r\n    if (Friday) selectedDays.push(5);\r\n    if (Saturday) selectedDays.push(6);\r\n\r\n    return selectedDays;\r\n  };\r\n\r\n  setDay = day => {\r\n    if (day) {\r\n      const index = parseInt(day, 10);\r\n      const selectedDay = this.props.listOfDays[index].name;\r\n      this.setState({ [selectedDay]: true });\r\n    }\r\n  };\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (this.state !== prevState) {\r\n      let daysOfWeek = this.getSelectedDays();\r\n      this.props.sendSelectedDays(daysOfWeek);\r\n    }\r\n    if (this.props.dayOfWeek !== prevProps.dayOfWeek) {\r\n      this.setDay(this.props.dayOfWeek);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const renderDayButton = day => {\r\n      return (\r\n        <React.Fragment key={day.id}>\r\n          <input\r\n            type=\"checkbox\"\r\n            id={day.name}\r\n            name={day.name}\r\n            checked={this.state[day.name]}\r\n            onChange={this.dayToggle.bind(this)}\r\n            className=\"weekday\"\r\n          />\r\n          <label htmlFor={day.name}>{day.letter}</label>\r\n        </React.Fragment>\r\n      );\r\n    };\r\n\r\n    return (\r\n      <div className=\"weekDays-selector\">\r\n        <Label style={{ paddingTop: \"0.2em\", paddingBottom: \"0.2em\" }}>\r\n          Select multiple days for a repeating event\r\n        </Label>\r\n\r\n        <FormGroup className=\"d-flex justify-content-center\">\r\n          {(this.props.listOfDays || []).map(day => renderDayButton(day))}\r\n        </FormGroup>\r\n        {this.props.valid && (\r\n          <small\r\n            className=\"text-danger\"\r\n            style={{ position: \"relative\", top: \"-1em\" }}\r\n          >\r\n            At least one day is required\r\n          </small>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MultiDayPicker;\r\n","import React from \"react\";\r\nimport {\r\n  UncontrolledDropdown,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  DropdownItem\r\n} from \"reactstrap\";\r\n\r\nconst ColorPicker = ({\r\n  colorList,\r\n  selectedColor,\r\n  defaultColor,\r\n  setSelectedColor\r\n}) => {\r\n  const populateColors = color => {\r\n    return (\r\n      <DropdownItem\r\n        key={color.id}\r\n        style={{\r\n          backgroundColor: color.color,\r\n          height: \"2em\",\r\n          marginBottom: \"0.15em\"\r\n        }}\r\n        onClick={() => setSelectedColor(color.id)}\r\n        className=\"colorBox-cursor\"\r\n      />\r\n    );\r\n  };\r\n\r\n  return (\r\n    <UncontrolledDropdown style={{ marginTop: \"1.5em\" }}>\r\n      <DropdownToggle\r\n        caret\r\n        style={{ backgroundColor: selectedColor || defaultColor }}\r\n      >\r\n        Event Color\r\n      </DropdownToggle>\r\n      <DropdownMenu\r\n        modifiers={{\r\n          setMaxHeight: {\r\n            enabled: true,\r\n            order: 890,\r\n            fn: data => {\r\n              return {\r\n                ...data,\r\n                styles: {\r\n                  ...data.styles,\r\n                  overflow: \"auto\",\r\n                  maxHeight: 160\r\n                }\r\n              };\r\n            }\r\n          }\r\n        }}\r\n      >\r\n        {(colorList || []).map(color => populateColors(color))}\r\n      </DropdownMenu>\r\n    </UncontrolledDropdown>\r\n  );\r\n};\r\n\r\nexport default ColorPicker;\r\n","import React, { Component } from \"react\";\r\nimport moment from \"moment\";\r\nimport {\r\n  Input,\r\n  Label,\r\n  FormGroup,\r\n  ListGroup,\r\n  ListGroupItem,\r\n  Modal,\r\n  ModalBody,\r\n  ModalHeader,\r\n  FormFeedback\r\n} from \"reactstrap\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"../styles/react-datepicker.css\";\r\nimport { handleInputChanges } from \"../utilities/inputUtilities\";\r\nimport { formatToTimeString } from \"../utilities/dateTimeFormatter\";\r\nimport \"../styles/zmdi-buttons.css\";\r\nimport MultiDayPicker from \"./MultiDayPicker\";\r\nimport ColorPicker from \"./ColorPicker\";\r\n\r\nclass AddToTemplateModal extends Component {\r\n  state = {\r\n    selectedDays: [],\r\n    inEditMode: false,\r\n    colorTypeId: \"9\",\r\n    dayOfWeek: \"\",\r\n    headerTextColor: \"white\",\r\n    defaultBgColor: \"#5484ed\",\r\n    modalHeaderColor: \"\",\r\n    title: \"\",\r\n    addEventTitle: \"Add to Your Schedule\",\r\n    startDate: moment(\"11012015\", \"MMDDYYYY\"),\r\n    startTime: moment(\"11012015 08:00\", \"MMDDYYYY HH:mm\"),\r\n    endTime: moment(\"11012015 10:00\", \"MMDDYYYY HH:mm\"),\r\n    daysDataList: [\r\n      { id: 0, name: \"Sunday\", short: \"Sun\", letter: \"S\" },\r\n      { id: 1, name: \"Monday\", short: \"Mon\", letter: \"M\" },\r\n      { id: 2, name: \"Tuesday\", short: \"Tue\", letter: \"T\" },\r\n      { id: 3, name: \"Wednesday\", short: \"Wed\", letter: \"W\" },\r\n      { id: 4, name: \"Thursday\", short: \"Thu\", letter: \"TH\" },\r\n      { id: 5, name: \"Friday\", short: \"Fri\", letter: \"F\" },\r\n      { id: 6, name: \"Saturday\", short: \"Sat\", letter: \"S\" }\r\n    ],\r\n    validation: {\r\n      color: true,\r\n      pickedADay: false,\r\n      pleasePickADay: false,\r\n      title: true\r\n    }\r\n  };\r\n\r\n  populateDaysBox = dayOfWeek => {\r\n    return (\r\n      <option key={dayOfWeek.id} value={dayOfWeek.id}>\r\n        {dayOfWeek.name}\r\n      </option>\r\n    );\r\n  };\r\n\r\n  setSelectedDays = selectedDays => {\r\n    this.setState({ selectedDays }, () => {\r\n      if (selectedDays.length !== 0 && this.state.validation.pleasePickADay)\r\n        this.validateInputs();\r\n    });\r\n  };\r\n\r\n  getFormData = () => {\r\n    let startTime = formatToTimeString(this.state.startTime);\r\n    let endTime = formatToTimeString(this.state.endTime);\r\n    let colorTypeId = parseInt(this.state.colorTypeId);\r\n    const newEventData = {\r\n      colorTypeId,\r\n      startTime,\r\n      endTime,\r\n      dayOfWeek: parseInt(this.state.dayOfWeek),\r\n      title: this.state.title\r\n    };\r\n    return newEventData;\r\n  };\r\n\r\n  handleSubmission = event => {\r\n    if (this.state.inEditMode) {\r\n      this.sendUpdatedEvent(this.props.selectedEvent, event);\r\n    } else {\r\n      let newEvents = this.state.selectedDays.map(day => {\r\n        let dayOfWeek = day;\r\n        let { colorTypeId, title, startTime, endTime } = event;\r\n        return { colorTypeId, title, startTime, endTime, dayOfWeek };\r\n      });\r\n      this.sendEventToCalendar(newEvents);\r\n    }\r\n  };\r\n\r\n  sendUpdatedEvent = (original, event) => {\r\n    this.resetValues();\r\n    this.props.showUpdatedEvent(original, event);\r\n  };\r\n\r\n  sendEventToCalendar = event => {\r\n    this.resetValues();\r\n    this.props.sendEventToCalendar(event);\r\n  };\r\n\r\n  resetValues = () => {\r\n    this.setState({\r\n      //colorTypeId: \"9\",\r\n      dayOfWeek: \"\",\r\n      //modalHeaderColor: \"\",\r\n      title: \"\",\r\n      inEditMode: false,\r\n      selectedDays: [],\r\n      validation: {\r\n        color: true,\r\n        pickedADay: false,\r\n        pleasePickADay: false,\r\n        title: true\r\n      }\r\n    });\r\n  };\r\n\r\n  closeHandler = () => {\r\n    this.props.onClose();\r\n    this.resetValues();\r\n  };\r\n\r\n  updateInputValue = handleInputChanges.bind(this);\r\n\r\n  setSelectedColor = colorTypeId => {\r\n    this.setState({ colorTypeId });\r\n    this.updateModalBgColor(colorTypeId);\r\n  };\r\n\r\n  handleDayChange = e => {\r\n    this.updateInputValue(e);\r\n    this.setState({\r\n      startDate: moment(\"11012015\", \"MMDDYYYY\").add(e.target.value, \"days\")\r\n    });\r\n  };\r\n\r\n  insertDeleteButton = () => {\r\n    if (this.state.inEditMode === true) {\r\n      return (\r\n        <button\r\n          className=\"btn btn-danger\"\r\n          onClick={() => {\r\n            this.props.delete(this.props.selectedEvent);\r\n            this.closeHandler();\r\n          }}\r\n        >\r\n          Delete\r\n        </button>\r\n      );\r\n    }\r\n  };\r\n\r\n  updateModalBgColor = id => {\r\n    let modalHeaderColor = this.props.colorIndex[id].color;\r\n    this.setState({ modalHeaderColor });\r\n  };\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (\r\n      this.props.start !== prevProps.start ||\r\n      this.props.end !== prevProps.end\r\n    ) {\r\n      this.setState({\r\n        startDate: moment(this.props.start),\r\n        startTime: moment(this.props.start),\r\n        endTime: moment(this.props.end),\r\n        dayOfWeek: moment(this.props.start).format(\"e\")\r\n      });\r\n    }\r\n    if (this.state.selectedDays !== prevState.selectedDays) {\r\n      //this.validateInputs();\r\n    }\r\n    if (this.props.selectedEvent !== prevProps.selectedEvent) {\r\n      let {\r\n        colorTypeId,\r\n        dayOfWeek,\r\n        start,\r\n        end,\r\n        title\r\n      } = this.props.selectedEvent;\r\n      if (colorTypeId) {\r\n        this.updateModalBgColor(colorTypeId);\r\n        this.setState({\r\n          inEditMode: true,\r\n          title,\r\n          colorTypeId,\r\n          dayOfWeek,\r\n          startTime: moment(start),\r\n          endTime: moment(end)\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  renderDayPicker = () => {\r\n    if (this.state.inEditMode === false) {\r\n      return (\r\n        <MultiDayPicker\r\n          dayOfWeek={this.state.dayOfWeek}\r\n          sendSelectedDays={this.setSelectedDays}\r\n          valid={this.state.validation.pleasePickADay}\r\n          listOfDays={this.state.daysDataList}\r\n        />\r\n      );\r\n    } else {\r\n      return (\r\n        <div className=\"form-group\" style={{ paddingBottom: \"0.1em\" }}>\r\n          <label>Day of Week</label>\r\n          <select\r\n            className=\"custom-select form-control mx-auto\"\r\n            name=\"dayOfWeek\"\r\n            value={this.state.dayOfWeek}\r\n            onChange={this.handleDayChange}\r\n          >\r\n            {(this.state.daysDataList || []).map(day =>\r\n              this.populateDaysBox(day)\r\n            )}\r\n          </select>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  validateInputs = () => {\r\n    const {\r\n      colorTypeId,\r\n      validation,\r\n      inEditMode,\r\n      selectedDays,\r\n      title\r\n    } = this.state;\r\n    title.length > 0 ? (validation.title = true) : (validation.title = false);\r\n    Number.isInteger(parseInt(colorTypeId))\r\n      ? (validation.color = true)\r\n      : (validation.color = false);\r\n    if (!inEditMode) {\r\n      if (selectedDays.length === 0) {\r\n        validation.pickedADay = false;\r\n        validation.pleasePickADay = true;\r\n      } else {\r\n        validation.pickedADay = true;\r\n        validation.pleasePickADay = false;\r\n      }\r\n    }\r\n    this.setState({ validation });\r\n  };\r\n\r\n  allValid = () => {\r\n    const { validation } = this.state;\r\n    if (this.state.inEditMode) {\r\n      if (validation.color) {\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n    if (\r\n      !this.state.inEditMode &&\r\n      validation.color &&\r\n      validation.pickedADay &&\r\n      validation.title\r\n    ) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { modalOpen } = this.props;\r\n    return (\r\n      <React.Fragment>\r\n        <Modal\r\n          style={{\r\n            maxWidth: 400,\r\n            minWidth: \"25em\",\r\n            position: \"relative\",\r\n            top: \"10\" // original 25\r\n          }}\r\n          isOpen={modalOpen}\r\n          toggle={() => this.closeHandler()}\r\n          modalTransition={{ timeout: 10 }}\r\n          backdropTransition={{ timeout: 10 }}\r\n          //className={this.props.className} // this will auto-size the modal if enabled\r\n        >\r\n          <ModalHeader\r\n            style={{\r\n              position: \"relative\",\r\n              paddingTop: \"2em\",\r\n              width: \"100%\",\r\n              color: this.state.headerTextColor,\r\n              backgroundColor:\r\n                this.state.modalHeaderColor || this.state.defaultBgColor\r\n            }}\r\n          >\r\n            <div\r\n              className=\"text-center mx-auto\"\r\n              style={{\r\n                position: \"relative\",\r\n                top: \"-0.4em\",\r\n                marginBottom: \"-0.1em\",\r\n                float: \"right\"\r\n              }}\r\n            >\r\n              <big className=\"text-center\">\r\n                &nbsp;\r\n                {(this.state.inEditMode && \"Edit Your Saved Event\") ||\r\n                  this.state.addEventTitle}\r\n              </big>\r\n            </div>\r\n          </ModalHeader>\r\n          <ModalBody\r\n            style={{\r\n              position: \"relative\",\r\n              top: \"-0.5em\",\r\n              marginBottom: \"-0.9em\"\r\n            }}\r\n          >\r\n            <ListGroup>\r\n              <ListGroupItem className=\"border-0\">\r\n                <div\r\n                  className=\"mx-auto\"\r\n                  style={{ marginTop: \"0.6em\", paddingBottom: \"1.4em\" }}\r\n                >\r\n                  <FormGroup>\r\n                    <Label>Event Name</Label>\r\n                    <Input\r\n                      type=\"text\"\r\n                      name=\"title\"\r\n                      value={this.state.title}\r\n                      onChange={e => {\r\n                        this.setState({ [e.target.name]: e.target.value }, () =>\r\n                          this.validateInputs()\r\n                        );\r\n                      }}\r\n                      invalid={!this.state.validation.title}\r\n                    />\r\n                    <FormFeedback valid />\r\n                    <FormFeedback>This field is required</FormFeedback>\r\n                  </FormGroup>\r\n\r\n                  <FormGroup>\r\n                    <ColorPicker\r\n                      colorList={this.props.googleColors}\r\n                      selectedColor={this.state.modalHeaderColor}\r\n                      defaultColor={this.state.defaultBgColor}\r\n                      setSelectedColor={this.setSelectedColor}\r\n                    />\r\n                  </FormGroup>\r\n\r\n                  {this.renderDayPicker()}\r\n\r\n                  <div\r\n                    className=\"form-group\"\r\n                    style={{ minWidth: \"22em\", marginBottom: \"-0.0em\" }}\r\n                  >\r\n                    <label>Start/End Times</label>\r\n                    <div className=\"form-row\">\r\n                      <div\r\n                        className=\"col\"\r\n                        style={{ maxWidth: \"25%\", minWidth: \"8em\" }}\r\n                      >\r\n                        <DatePicker\r\n                          selected={this.state.startTime}\r\n                          onChange={startTime => {\r\n                            if (startTime > this.state.endTime) {\r\n                              this.setState({\r\n                                startTime,\r\n                                endTime: moment(startTime).add(15, \"minutes\")\r\n                              });\r\n                            } else {\r\n                              this.setState({ startTime });\r\n                            }\r\n                          }}\r\n                          showTimeSelect\r\n                          showTimeSelectOnly\r\n                          timeIntervals={15}\r\n                          className=\"form-control text-center\"\r\n                          minTime={moment(\"11012015 05:00\", \"MMDDYYYY HH:mm\")}\r\n                          maxTime={moment(\"11012015 23:30\", \"MMDDYYYY HH:mm\")}\r\n                          dateFormat=\"LT\"\r\n                        />\r\n                      </div>\r\n                      <div\r\n                        className=\"col text-center\"\r\n                        style={{\r\n                          maxWidth: \"8%\",\r\n                          minWidth: \"1em\",\r\n                          marginTop: \"0.6em\"\r\n                        }}\r\n                      >\r\n                        <label>to</label>\r\n                      </div>\r\n                      <div\r\n                        className=\"col\"\r\n                        style={{ maxWidth: \"25%\", minWidth: \"8em\" }}\r\n                      >\r\n                        <DatePicker\r\n                          selected={this.state.endTime}\r\n                          onChange={endTime => this.setState({ endTime })}\r\n                          showTimeSelect\r\n                          showTimeSelectOnly\r\n                          timeIntervals={15}\r\n                          minTime={moment(\r\n                            `11012015 ${moment(this.state.startTime)\r\n                              .add(15, \"minutes\")\r\n                              .format(\"HH:mm\")}`,\r\n                            \"MMDDYYYY HH:mm\"\r\n                          )}\r\n                          maxTime={moment(\"11012015 23:59\", \"MMDDYYYY HH:mm\")}\r\n                          className=\"form-control text-center\"\r\n                          dateFormat=\"LT\"\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"text-right\">\r\n                  {this.insertDeleteButton()}\r\n                  &nbsp;&nbsp;\r\n                  <button\r\n                    className=\"btn btn-primary\"\r\n                    onClick={() => {\r\n                      this.validateInputs();\r\n                      if (this.allValid()) {\r\n                        const data = this.getFormData();\r\n                        this.handleSubmission(data);\r\n                      }\r\n                    }}\r\n                  >\r\n                    {(this.state.inEditMode && \"Update\") || \"Add\"}\r\n                  </button>\r\n                </div>\r\n              </ListGroupItem>\r\n            </ListGroup>\r\n          </ModalBody>\r\n        </Modal>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddToTemplateModal;\r\n","export default [\r\n  {\r\n    color: \"#5484ed\",\r\n    id: 9\r\n  },\r\n  {\r\n    color: \"#a4bdfc\",\r\n    id: 1\r\n  },\r\n  {\r\n    color: \"#7ae7bf\",\r\n    id: 2\r\n  },\r\n  {\r\n    color: \"#dbadff\",\r\n    id: 3\r\n  },\r\n  {\r\n    color: \"#ff887c\",\r\n    id: 4\r\n  },\r\n  {\r\n    color: \"#fbd75b\",\r\n    id: 5\r\n  },\r\n  {\r\n    color: \"#ffb878\",\r\n    id: 6\r\n  },\r\n  {\r\n    color: \"#46d6db\",\r\n    id: 7\r\n  },\r\n  {\r\n    color: \"#e1e1e1\",\r\n    id: 8\r\n  },\r\n  {\r\n    color: \"#51b749\",\r\n    id: 10\r\n  },\r\n  {\r\n    color: \"#dc2127\",\r\n    id: 11\r\n  }\r\n];\r\n","import React, { Component } from \"react\";\r\nimport BigCalendar from \"react-big-calendar\";\r\nimport moment from \"moment\";\r\nimport withDragAndDrop from \"react-big-calendar/lib/addons/dragAndDrop\";\r\nimport \"react-big-calendar/lib/addons/dragAndDrop/styles.css\";\r\nimport \"./styles/custom-calendar.css\";\r\nimport QuickCreateModal from \"./components/AddToTemplateModal\";\r\nimport googleColors from \"./data/googleColors\";\r\n\r\nconst DragAndDropCalendar = withDragAndDrop(BigCalendar);\r\nconst localizer = BigCalendar.momentLocalizer(moment);\r\n\r\nconst colorIndex = colorTypes => {\r\n  // transform array of colors into one object (to be used as an index for O(1) efficiency)\r\n  const colorIndex = {};\r\n  const colorKeys = Object.keys(colorTypes[0]).filter(key => key !== \"id\");\r\n  for (const color of colorTypes) {\r\n    const colorData = {};\r\n    colorKeys.forEach(key => {\r\n      colorData[key] = color[key];\r\n    });\r\n    colorIndex[color.id] = colorData;\r\n  }\r\n  return colorIndex;\r\n};\r\n\r\nclass App extends Component {\r\n  state = {\r\n    events: [],\r\n    colorIndex: colorIndex(googleColors),\r\n    quickCreateModal: false,\r\n    selectedEvent: {},\r\n    newStartTime: null,\r\n    newEndTime: null,\r\n    pageSettings: {\r\n      daysOfWeek: [\r\n        { id: 0, name: \"Sunday\", short: \"Sun\", abbr: \"S\" },\r\n        { id: 1, name: \"Monday\", short: \"Mon\", abbr: \"M\" },\r\n        { id: 2, name: \"Tuesday\", short: \"Tue\", abbr: \"T\" },\r\n        { id: 3, name: \"Wednesday\", short: \"Wed\", abbr: \"W\" },\r\n        { id: 4, name: \"Thursday\", short: \"Thu\", abbr: \"T\" },\r\n        { id: 5, name: \"Friday\", short: \"Fri\", abbr: \"F\" },\r\n        { id: 6, name: \"Saturday\", short: \"Sat\", abbr: \"S\" }\r\n      ]\r\n    }\r\n  };\r\n\r\n  updateCalendarFromQuickCreate = newEvents => {\r\n    let newEventsArr = newEvents.map(ev => this.reformatEventData(ev));\r\n    this.setState({\r\n      events: [...this.state.events, ...newEventsArr],\r\n      quickCreateModal: false\r\n    });\r\n  };\r\n\r\n  reformatEventData = event => {\r\n    let startDate = moment(\"11012015\", \"MMDDYYYY\")\r\n      .add(event.dayOfWeek, \"days\")\r\n      .format(\"YYYY-MM-DD\");\r\n    if (this.state.colorIndex[event.colorTypeId]) {\r\n      const colorData = this.state.colorIndex[event.colorTypeId];\r\n      let bgColor = colorData.color;\r\n      const updatedEvent = {\r\n        ...event,\r\n        start: new Date(`${startDate} ${event.startTime}`),\r\n        end: new Date(`${startDate} ${event.endTime}`),\r\n        bgColor\r\n      };\r\n      return updatedEvent;\r\n    } else {\r\n      // just in edge case\r\n      const updatedEvent = {\r\n        ...event,\r\n        start: new Date(`${startDate} ${event.startTime}`),\r\n        end: new Date(`${startDate} ${event.endTime}`),\r\n        bgColor: \"#4286f4\"\r\n      };\r\n      return updatedEvent;\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    let savedData = localStorage.getItem(\"schedule\");\r\n    if (savedData) {\r\n      const parsed = JSON.parse(savedData);\r\n      const events = parsed.map(ev => this.reformatEventData(ev));\r\n      this.setState({ events });\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (this.state.events !== prevState.events) {\r\n      const events = JSON.stringify(this.state.events);\r\n      localStorage.setItem(\"schedule\", events);\r\n    }\r\n  }\r\n\r\n  closeModalHandler = () => {\r\n    this.setState({\r\n      quickCreateModal: false,\r\n      selectedEvent: {}\r\n    });\r\n  };\r\n\r\n  quickRemoveFromCalendar = event => {\r\n    let events = this.state.events.filter(ev => ev !== event);\r\n    this.setState({ events });\r\n  };\r\n\r\n  moveEventHandler = this.onMoveEvent.bind(this);\r\n\r\n  onMoveEvent({ event, start, end }) {\r\n    let startDate = moment(start).format(\"DD\");\r\n    let endDate = moment(end).format(\"DD\");\r\n    let endDateTime = end;\r\n    if (startDate !== endDate) {\r\n      endDateTime = moment(start)\r\n        .hours(23)\r\n        .minutes(59)\r\n        .toDate();\r\n    }\r\n    this.prepareMovedEventForUpdate(event, start, endDateTime);\r\n  }\r\n\r\n  prepareMovedEventForUpdate = (event, newStart, newEnd) => {\r\n    let dayOfWeek = moment(newStart).format(\"e\");\r\n    let startTime = moment(newStart).format(\"HH:mm\");\r\n    let endTime = moment(newEnd).format(\"HH:mm\");\r\n    const updatedEvent = {\r\n      ...event,\r\n      dayOfWeek,\r\n      startTime,\r\n      endTime\r\n    };\r\n    this.renderMovedEvent(event, updatedEvent, newStart, newEnd);\r\n  };\r\n\r\n  renderUpdatedEvent(original, event) {\r\n    const { events } = this.state;\r\n    let reformatted = this.reformatEventData(event);\r\n    let remaining = events.filter(ev => ev !== original);\r\n    this.setState({\r\n      events: [...remaining, reformatted],\r\n      quickCreateModal: false,\r\n      selectedEvent: {}\r\n    });\r\n  }\r\n\r\n  renderMovedEvent(original, event, start, end) {\r\n    const { events } = this.state;\r\n    const updatedEvent = { ...event, start, end };\r\n    const remaining = events.filter(ev => ev !== original);\r\n    this.setState({\r\n      events: [...remaining, updatedEvent]\r\n    });\r\n  }\r\n\r\n  setEventCellStyling = event => {\r\n    let color = event.bgColor;\r\n    let style = {\r\n      background: `rgba(${parseInt(color.substring(1, 3), 16)}, ${parseInt(\r\n        color.substring(3, 5),\r\n        16\r\n      )}, ${parseInt(color.substring(5, 7), 16)}, 0.99)`\r\n    };\r\n    return { style };\r\n  };\r\n\r\n  onCalendarEventSelection = event => {\r\n    this.setState({\r\n      selectedEvent: event,\r\n      quickCreateModal: true\r\n    });\r\n  };\r\n\r\n  calendarSelectionHandler = slotInfo => {\r\n    let newEventStart = parseInt(moment(slotInfo.start).format(\"x\"));\r\n    let newEventEnd = parseInt(moment(slotInfo.end).format(\"x\"));\r\n\r\n    this.setState({\r\n      newEventStart,\r\n      newEventEnd,\r\n      quickCreateModal: true\r\n    });\r\n    //console.log(slotInfo);\r\n  };\r\n\r\n  render() {\r\n    let calDateTimeFormatting = {\r\n      dayFormat: (date, culture, localizer) =>\r\n        localizer.format(date, \"dddd\", culture),\r\n      timeGutterFormat: (date, culture, localizer) =>\r\n        localizer.format(date, \"h a\", culture)\r\n    };\r\n    return (\r\n      <div className=\"container-fluid\">\r\n        <div className=\"form-row\">\r\n          <div className=\"col\" />\r\n          <div className=\"col text-center\">\r\n            <h2\r\n              className=\"text-center\"\r\n              style={{ position: \"relative\", bottom: \"-0.3em\" }}\r\n            >\r\n              Week Planner\r\n            </h2>\r\n          </div>\r\n          <div className=\"col text-right\">\r\n            <button\r\n              className=\"btn-lg btn-primary\"\r\n              onClick={() => this.setState({ quickCreateModal: true })}\r\n              style={{\r\n                position: \"relative\",\r\n                top: \"0.3em\",\r\n                borderRadius: \"1.8em\",\r\n                margin: \"0 1em 0.8em 0\"\r\n              }}\r\n            >\r\n              <i className=\"zmdi zmdi-plus text-white zmdi-hc-lg\" />\r\n            </button>\r\n          </div>\r\n        </div>\r\n        <DragAndDropCalendar\r\n          {...this.props}\r\n          localizer={localizer}\r\n          selectable=\"ignoreEvents\"\r\n          events={this.state.events}\r\n          defaultDate={new Date(2015, 10, 1, 0)}\r\n          defaultView={\"week\"}\r\n          views={[\"week\"]}\r\n          step={15}\r\n          timeslots={4}\r\n          toolbar={false}\r\n          min={moment()\r\n            .hours(5)\r\n            .minutes(0)\r\n            .toDate()}\r\n          formats={calDateTimeFormatting}\r\n          onEventDrop={this.moveEventHandler}\r\n          eventPropGetter={this.setEventCellStyling}\r\n          onSelectEvent={this.onCalendarEventSelection}\r\n          onSelectSlot={this.calendarSelectionHandler}\r\n        />\r\n\r\n        <QuickCreateModal\r\n          start={this.state.newEventStart}\r\n          selectedEvent={this.state.selectedEvent}\r\n          colorIndex={this.state.colorIndex}\r\n          end={this.state.newEventEnd}\r\n          modalOpen={this.state.quickCreateModal}\r\n          onClose={this.closeModalHandler.bind(this)}\r\n          googleColors={googleColors}\r\n          sendEventToCalendar={this.updateCalendarFromQuickCreate}\r\n          showUpdatedEvent={this.renderUpdatedEvent.bind(this)}\r\n          delete={this.quickRemoveFromCalendar}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n\r\n              // Execute callback\r\n              if (config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n//import \"./index.css\";\r\nimport Planner from \"./Planner\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\n\r\nReactDOM.render(<Planner />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}